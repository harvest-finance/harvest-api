const {
  CHAINS_ID,
  VAULT_CATEGORIES_IDS,
  GET_PRICE_TYPES,
  ESTIMATED_APY_TYPES,
  SUSHI_POOLS_IDS,
  BASIS_POOL_IDS,
} = require('../constants')

const addresses = require('./addresses.json')

const strat30PercentFactor = '0.7'
const profitSharingCut8Percent = '0.92'
const convexProfitSharingFactor = '0.63'

module.exports = {
  FARM: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    logoUrl: './icons/farm.png',
    tokenAddress: addresses.FARM,
    displayName: 'FARM',
    decimals: '18',
    vaultAddress: null,
    newDetails: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.FARM] },
  },
  WETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/eth.png',
    apyIconUrls: ['./icons/comp.png', './icons/idle.png'],
    apyTokenSymbols: ['COMP', 'IDLE'],
    displayName: 'WETH',
    tokenAddress: addresses.WETH,
    decimals: '18',
    vaultAddress: addresses.V2.WETH.NewVault,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: ['WETH', '0xc8e6ca6e96a326dc448307a5fde90a0b21fd7f80', '0.7'],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'WETH'],
  },
  UNT: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/unt.png',
    tokenAddress: addresses.UNT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['universe-finance-token'],
    },
  },
  UniV3_UNT_ETH: {
    disableAutoSwap: true,
    isSingleAssetWithdrawalAllowed: false,
    chain: CHAINS_ID.ETH_MAINNET,
    isNew: true,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: UNT-ETH',
    subLabel: 'Universe Finance',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-unt-eth.png',
    tokenAddress: addresses.V2.UniV3_UNT_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_UNT_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_UNT_ETH.NewVault, 'WETH', 'UNT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'UNT', 'WETH'],
  },
  amWBTC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.amWBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
  },
  amWETH: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.amWETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
  },
  am3CRV: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.am3CRVToken,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.am3CRVPool,
        addresses.MATIC.am3CRVToken,
        18,
        ['amDAI', 'amUSDC', 'amUSDT'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
  },
  amDAI: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.amDAI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DAI] },
  },
  amUSDC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.amUSDC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDC] },
  },
  amUSDT: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.amUSDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDT] },
  },
  crvTriCrypto3_polygon: {
    isNew: true,
    category: VAULT_CATEGORIES_IDS.CURVE,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/curve-tricrypto.png',
    apyIconUrls: ['./icons/curve.png'],
    apyTokenSymbols: ['CRV'],
    displayName: 'Curve: aTriCrypto3',
    tokenAddress: addresses.MATIC.V2.crvTriCrypto3_polygon.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.crvTriCrypto3_polygon.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.V2.crvTriCrypto3_polygon.CurvePool,
        addresses.MATIC.V2.crvTriCrypto3_polygon.Underlying,
        18,
        ['amWBTC', 'amWETH', 'am3CRV'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CRV_GENERAL,
        params: [
          'crvTriCrypto3_polygon',
          addresses.MATIC.V2.crvTriCrypto3_polygon.Gauge,
          addresses.MATIC.V2.crvTriCrypto3_polygon.Underlying,
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
          addresses.MATIC.V2.crvTriCrypto3_polygon.RootChainGauge,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  crvEurtUsd_polygon: {
    isNew: true,
    category: VAULT_CATEGORIES_IDS.CURVE,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/curve-eurtusd.png',
    apyIconUrls: ['./icons/curve.png'],
    apyTokenSymbols: ['CRV'],
    displayName: 'Curve: EURT-USD',
    tokenAddress: addresses.MATIC.V2.crvEurtUsd_polygon.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.crvEurtUsd_polygon.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.V2.crvEurtUsd_polygon.CurvePool,
        addresses.MATIC.V2.crvEurtUsd_polygon.Underlying,
        18,
        ['pEURT', 'am3CRV'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CRV_GENERAL,
        params: [
          'crvEurtUsd_polygon',
          addresses.MATIC.V2.crvEurtUsd_polygon.Gauge,
          addresses.MATIC.V2.crvEurtUsd_polygon.Underlying,
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
          addresses.MATIC.V2.crvEurtUsd_polygon.RootChainGauge,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  jarvis_SES_2JPY: {
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/ses-2jpy.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'Jarvis: SES-2JPY',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_SES_2JPY.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_SES_2JPY.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_SES_2JPY.Underlying, 'SES', 'jarvis_2JPY_HODL'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'SES'],
  },
  jarvis_QUI_2CAD: {
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/qui-2cad.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'Jarvis: QUI-2CAD',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_QUI_2CAD.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_QUI_2CAD.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_QUI_2CAD.Underlying, 'QUI', 'jarvis_2CAD_HODL'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_V2',
        params: [
          1,
          addresses.MATIC.V2.jarvis_QUI_2CAD.RewardPool,
          addresses.MATIC.V2.jarvis_QUI_2CAD.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'QUI'],
  },
  jarvis_2JPY_HODL: {
    isNew: true,
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/2jpy.png',
    apyIconUrls: ['./icons/jrtmay22.png'],
    apyTokenSymbols: ['JRT-MAY22'],
    displayName: 'Jarvis: 2JPY',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_2JPY_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_2JPY_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.V2.jarvis_2JPY_HODL.Underlying,
        addresses.MATIC.V2.jarvis_2JPY_HODL.Underlying,
        18,
        ['JJPY', 'JPYC'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          0,
          addresses.MATIC.V2.jarvis_2JPY_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_2JPY_HODL.Underlying,
          'jarvis_JRTMAY22_USDC',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>JRT(MAY22)</b> deposited into <b>JRT(MAY22)-USDC</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'JRT-MAY22'],
  },
  jarvis_2CAD_HODL: {
    isNew: true,
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/2cad.png',
    apyIconUrls: ['./icons/jrtmay22.png'],
    apyTokenSymbols: ['JRT-MAY22'],
    displayName: 'Jarvis: 2CAD',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_2CAD_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_2CAD_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.V2.jarvis_2CAD_HODL.Underlying,
        addresses.MATIC.V2.jarvis_2CAD_HODL.Underlying,
        18,
        ['JCAD', 'CADC'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          1,
          addresses.MATIC.V2.jarvis_2CAD_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_2CAD_HODL.Underlying,
          'jarvis_JRTMAY22_USDC',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>JRT(MAY22)</b> deposited into <b>JRT(MAY22)-USDC</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'JRT-MAY22'],
  },
  jarvis_2SGD_HODL: {
    isNew: true,
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/2sgd.png',
    apyIconUrls: ['./icons/jrtmay22.png'],
    apyTokenSymbols: ['JRT-MAY22'],
    displayName: 'Jarvis: 2SGD',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_2SGD_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_2SGD_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.V2.jarvis_2SGD_HODL.Underlying,
        addresses.MATIC.V2.jarvis_2SGD_HODL.Underlying,
        18,
        ['JSGD', 'XSGD'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          2,
          addresses.MATIC.V2.jarvis_2SGD_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_2SGD_HODL.Underlying,
          'jarvis_JRTMAY22_USDC',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>JRT(MAY22)</b> deposited into <b>JRT(MAY22)-USDC</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'JRT-MAY22'],
  },
  jarvis_JRTMAY22_USDC: {
    isNew: true,
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jrtmay22-usdc.png',
    apyIconUrls: ['./icons/jrtmay22.png'],
    apyTokenSymbols: ['JRT-MAY22'],
    displayName: 'Jarvis: JRT(MAY22)-USDC',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_JRTMAY22_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_JRTMAY22_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_JRTMAY22_USDC.Underlying, 'JRT-MAY22', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_V2',
        params: [
          3,
          addresses.MATIC.V2.jarvis_JRTMAY22_USDC.RewardPool,
          addresses.MATIC.V2.jarvis_JRTMAY22_USDC.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'JRT-MAY22'],
  },
  'JRT-MAY22': {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.JRT_MAY22,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.JRT_MAY22,
        addresses.MATIC.pUSDC,
        addresses.MATIC.V2.jarvis_JRTMAY22_USDC.Underlying,
      ],
    },
  },
  fJRTMAY22_USDC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_JRTMAY22_USDC.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_JRTMAY22_USDC.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  JSGD: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jsgd.svg',
    tokenAddress: addresses.MATIC.JSGD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['xsgd'],
    },
  },
  XSGD: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/xsgd.png',
    tokenAddress: addresses.MATIC.XSGD,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['xsgd'],
    },
  },
  JJPY: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jjpy.png',
    tokenAddress: addresses.MATIC.JJPY,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.JPYC] },
  },
  JPYC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jpyc.png',
    tokenAddress: addresses.MATIC.JPYC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.JPYC] },
  },
  JCAD: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jcad.png',
    tokenAddress: addresses.MATIC.JCAD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.CADC] },
  },
  CADC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/cadc.png',
    tokenAddress: addresses.MATIC.CADC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.CADC] },
  },
  SES: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.SES,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.SES,
        addresses.MATIC.V2.jarvis_2JPY_HODL.Underlying,
        addresses.MATIC.V2.jarvis_SES_2JPY.Underlying,
      ],
    },
  },
  QUI: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.QUI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.QUI,
        addresses.MATIC.V2.jarvis_2CAD_HODL.Underlying,
        addresses.MATIC.V2.jarvis_QUI_2CAD.Underlying,
      ],
    },
  },
  fSES_2JPY: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_SES_2JPY.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_SES_2JPY.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  fQUI_2CAD: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_QUI_2CAD.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_QUI_2CAD.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  crvUSTWORMHOLE: {
    isNew: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    displayName: 'CRV:UST-WORMHOLE',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/curve-ust.png',
    tokenAddress: addresses.V2.crv_UST_WORMHOLE.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crv_UST_WORMHOLE.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.UST] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['ust-wormhole', strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  crvCRVETH: {
    isNew: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    displayName: 'CRV:CRVETH',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/curve-crveth.png',
    tokenAddress: addresses.V2.crv_CRV_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crv_CRV_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.crv_CRV_ETH.Miner,
        addresses.V2.crv_CRV_ETH.Underlying,
        '18',
        ['CRV', 'WETH'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['crv-eth', strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  bal_TUSD_STABLE: {
    category: VAULT_CATEGORIES_IDS.BALANCER,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/bal-tusd.png',
    apyIconUrls: ['./icons/balancer.png', './icons/tusd.png'],
    apyTokenSymbols: ['BAL', 'TUSD'],
    displayName: 'Balancer: TUSD-Stable',
    subLabel: 'TUSD, USDC, USDT, DAI',
    tokenAddress: addresses.MATIC.V2.bal_TUSD_STABLE.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.bal_TUSD_STABLE.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.bal_TUSD_STABLE.Underlying,
        addresses.MATIC.V2.bal_TUSD_STABLE.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.bal_TUSD_STABLE.Underlying,
          addresses.MATIC.V2.bal_TUSD_STABLE.PoolId,
          '800',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
          [addresses.MATIC.pTUSD],
          ['55000'],
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'BAL'],
  },
  bal_USDC_WETH_polygon: {
    category: VAULT_CATEGORIES_IDS.BALANCER,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/bal-usdc-eth.png',
    apyIconUrls: ['./icons/balancer.png'],
    apyTokenSymbols: ['BAL'],
    displayName: 'Balancer: USDC-WETH',
    tokenAddress: addresses.MATIC.V2.bal_USDC_WETH_polygon.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.bal_USDC_WETH_polygon.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.bal_USDC_WETH_polygon.Underlying,
        addresses.MATIC.V2.bal_USDC_WETH_polygon.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.bal_USDC_WETH_polygon.Underlying,
          addresses.MATIC.V2.bal_USDC_WETH_polygon.PoolId,
          '1750',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'BAL'],
  },
  bal_WBTC_WETH_polygon: {
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/bal-wbtc-eth.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'Balancer: WBTC-WETH',
    tokenAddress: addresses.MATIC.V2.bal_WBTC_WETH_polygon.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.bal_WBTC_WETH_polygon.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.bal_WBTC_WETH_polygon.Underlying,
        addresses.MATIC.V2.bal_WBTC_WETH_polygon.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.bal_WBTC_WETH_polygon.Underlying,
          addresses.MATIC.V2.bal_WBTC_WETH_polygon.PoolId,
          '1750',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'BAL'],
  },
  pPSP: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/psp.png',
    tokenAddress: addresses.MATIC.pPSP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['paraswap'],
    },
  },
  quickswap_PSP_MATIC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.QUICKSWAP,
    displayName: 'Quickswap: PSP-MATIC',
    apyIconUrls: ['./icons/psp.png', './icons/quick.png'],
    apyTokenSymbols: ['PSP', 'dQUICK'],
    logoUrl: './icons/quick-psp-matic.png',
    tokenAddress: addresses.MATIC.V2.quickswap_PSP_MATIC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickswap_PSP_MATIC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.quickswap_PSP_MATIC.Underlying, 'pPSP', 'WMATIC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.QUICKSWAP_DUAL_REWARD,
        params: [
          addresses.MATIC.V2.quickswap_PSP_MATIC.RewardPool,
          'quickswap_PSP_MATIC',
          'dQUICK',
          'pPSP',
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'WMATIC', 'pPSP', 'dQUICK'],
  },
  quick_YEL_MATIC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.YEL,
    logoUrl: './icons/yel-matic.png',
    apyIconUrls: ['./icons/yel.png'],
    apyTokenSymbols: ['YEL'],
    displayName: 'YEL: YEL-MATIC',
    subLabel: 'Quickswap',
    tokenAddress: addresses.MATIC.V2.quick_YEL_MATIC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quick_YEL_MATIC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.quick_YEL_MATIC.Underlying, 'pYEL', 'WMATIC'],
    },
    estimateApyFunctions: [
      {
        type: 'YEL-MATIC',
        params: [addresses.MATIC.V2.quick_YEL_MATIC.PoolId, profitSharingCut8Percent],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pUSDC', 'pWETH'],
  },
  popsicle_ICE_WETH: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.POPSICLE,
    displayName: 'Popsicle: ICE-WETH',
    subLabel: 'Sushiswap',
    apyIconUrls: ['./icons/ice.png'],
    apyTokenSymbols: ['ICE'],
    logoUrl: './icons/ice-eth.png',
    tokenAddress: addresses.MATIC.V2.popsicle_ICE_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.popsicle_ICE_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.popsicle_ICE_WETH.Underlying, 'pICE', 'pWETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.POPSICLE,
        params: [
          addresses.MATIC.V2.popsicle_ICE_WETH.PoolId,
          'pICE',
          'pWETH',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pWETH', 'pUSDT'],
  },
  mUSD: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.MSTABLE,
    logoUrl: './icons/mstable.svg',
    apyIconUrls: ['./icons/mta.svg'],
    apyTokenSymbols: ['MTA'],
    displayName: 'mUSD',
    subLabel: 'mStable',
    tokenAddress: addresses.MATIC.V2.mUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.mUSD.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['musd'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MSTABLE,
        params: ['imUSD', 'polygon', profitSharingCut8Percent],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'wMATIC'],
  },
  LOOKS: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/looks.png',
    tokenAddress: addresses.LOOKS,
    decimals: '18',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['looksrare'],
    },
    apyIconUrls: ['./icons/weth.png'],
    apyTokenSymbols: ['WETH'],
    displayName: 'LOOKS',
    vaultAddress: addresses.V2.looks_LOOKS.NewVault,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LOOKSRARE_SINGLE_ASSET,
        params: [addresses.V2.looks_LOOKS.RewardPool, strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LOOKS'],
  },
  uni_LOOKS_ETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'LOOKS-WETH',
    apyIconUrls: ['./icons/looks.png'],
    apyTokenSymbols: ['LOOKS'],
    logoUrl: './icons/uni-looks-weth.png',
    tokenAddress: addresses.V2.uni_LOOKS_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.uni_LOOKS_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.uni_LOOKS_ETH.Underlying, 'LOOKS', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LOOKS'],
  },
  pGENE: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/gene.png',
    tokenAddress: addresses.MATIC.pGENE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['genomesdao'],
    },
  },
  pGNOME: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/gnome.png',
    tokenAddress: addresses.MATIC.pGNOME,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gnome'],
    },
  },
  pYEL: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/yel.png',
    tokenAddress: addresses.MATIC.pYEL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['yel-finance'],
    },
  },
  pICE: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/ice.png',
    tokenAddress: addresses.MATIC.pICE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ice-token'],
    },
  },
  SUSHI_GENE_ETH: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENOMES,
    logoUrl: './icons/sushi-gene-eth.png',
    subLabel: 'Genomes.io',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'GENE-ETH',
    tokenAddress: addresses.MATIC.V2.SUSHI_GENE_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.SUSHI_GENE_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.SUSHI_GENE_ETH.Underlying, 'pGENE', 'pWETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pGNOME'],
  },
  SUSHI_GNOME_ETH: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENOMES,
    logoUrl: './icons/sushi-gnome-eth.png',
    subLabel: 'Genomes.io',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'GNOME-ETH',
    tokenAddress: addresses.MATIC.V2.SUSHI_GNOME_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.SUSHI_GNOME_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.SUSHI_GNOME_ETH.Underlying, 'pGNOME', 'pWETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pGENE'],
  },
  crvCVXCRV: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    displayName: 'CRV:CVXCRV',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/curve-cvxcrv.png',
    tokenAddress: addresses.V2.crvCVXCRV.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvCVXCRV.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.crvCVXCRV.Underlying,
        addresses.V2.crvCVXCRV.Underlying,
        '18',
        ['CRV', 'cvxCRV'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['cvxcrv', strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  IDLE: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/idle.png',
    tokenAddress: addresses.IDLE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['idle'],
    },
  },
  ORC: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/orc.png',
    tokenAddress: addresses.ORC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['orbit-chain'],
    },
  },
  UniV3_ORC_ETH: {
    disableAutoSwap: true,
    isSingleAssetWithdrawalAllowed: false,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: ORC-ETH',
    subLabel: 'Orbit Chain',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-orc-eth.png',
    tokenAddress: addresses.V2.UniV3_ORC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ORC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ORC_ETH.NewVault, 'ORC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ORC', 'WETH'],
  },
  BABL: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/babl.png',
    tokenAddress: addresses.BABL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_V3,
      params: ['BABL', 'WETH', 3000],
    },
  },
  UniV3_BABL_ETH: {
    disableAutoSwap: true,
    isSingleAssetWithdrawalAllowed: false,
    chain: CHAINS_ID.ETH_MAINNET,
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: BABL-ETH',
    subLabel: 'Babylon Finance',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-babl-eth.png',
    tokenAddress: addresses.V2.UniV3_BABL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_BABL_ETH.NewVault,
    pricesInfo: {
      BABL: ['Min price: 1 BABL per ETH', 'Max price: 997.9 BABL per ETH'],
      ETH: ['Min price: 0.0010021 ETH per BABL', 'Max price: 1 ETH per BABL'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_BABL_ETH.NewVault, 'WETH', 'BABL'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BABL', 'WETH'],
  },
  DON: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/don.png',
    tokenAddress: addresses.DON,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['donkey-token'],
    },
  },
  CNG: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/cng.png',
    tokenAddress: addresses.CNG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_V3,
      params: ['CNG', 'WETH', 10000],
    },
  },
  ecoCNG: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/cng.png',
    tokenAddress: addresses.ecoCNG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_V3,
      params: ['CNG', 'WETH', 10000],
    },
  },
  UniV3_USDC_ETH_4200_5500: {
    zapFrontrunProtection: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: USDC-ETH',
    subLabel: 'ETH Range: 4.2K⟷5.5K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-usdc-eth.png',
    tokenAddress: addresses.V2.UniV3_USDC_ETH_4200_5500.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDC_ETH_4200_5500.NewVault,
    pricesInfo: {
      USDC: ['Min price: 4196.4 USDC per ETH', 'Max price: 5497.1 USDC per ETH'],
      ETH: ['Min price: 0.00018191 ETH per USDC', 'Max price: 0.0002383 ETH per USDC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDC_ETH_4200_5500.NewVault, 'USDC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'WETH'],
  },
  UniV3_DAI_ETH_4200_5500: {
    zapFrontrunProtection: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: DAI-ETH',
    subLabel: 'ETH Range: 4.2K⟷5.5K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-dai-eth.png',
    tokenAddress: addresses.V2.UniV3_DAI_ETH_4200_5500.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DAI_ETH_4200_5500.NewVault,
    pricesInfo: {
      DAI: ['Min price: 4186.3 DAI per ETH', 'Max price: 5483.9 DAI per ETH'],
      ETH: ['Min price: 0.00018235 ETH per DAI', 'Max price: 0.00023887 ETH per DAI'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DAI_ETH_4200_5500.NewVault, 'DAI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'WETH'],
  },
  UniV3_ETH_USDT_4200_5500: {
    zapFrontrunProtection: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: ETH-USDT',
    subLabel: 'ETH Range: 4.2K⟷5.5K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-eth-usdt.png',
    tokenAddress: addresses.V2.UniV3_ETH_USDT_4200_5500.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ETH_USDT_4200_5500.NewVault,
    pricesInfo: {
      USDT: ['Min price: 4171.3 USDT per ETH', 'Max price: 5530.2 USDT per ETH'],
      ETH: ['Min price: 0.00018083 ETH per USDT', 'Max price: 0.00023973 ETH per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ETH_USDT_4200_5500.NewVault, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WETH', 'USDT'],
  },
  UniV3_CNG_ETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: CNG-ETH',
    subLabel: 'Changer',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-eth-cng.png',
    tokenAddress: addresses.V2.UniV3_CNG_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_CNG_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_CNG_ETH.NewVault, 'CNG', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CNG', 'WETH'],
    disableAutoSwap: true,
  },
  UniV3_USDC_ETH_3000_4500: {
    inactive: true,
    zapFrontrunProtection: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: USDC-ETH',
    subLabel: 'ETH Range: 3K⟷4.5K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-usdc-eth.png',
    tokenAddress: addresses.V2.UniV3_USDC_ETH_3000_4500.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDC_ETH_3000_4500.NewVault,
    pricesInfo: {
      USDC: ['Min price: 3053.4 USDC per ETH', 'Max price: 4509.7 USDC per ETH'],
      ETH: ['Min price: 0.00022175 ETH per USDC', 'Max price: 0.00032751 ETH per USDC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDC_ETH_3000_4500.NewVault, 'USDC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'WETH'],
  },
  UniV3_DAI_ETH_3000_4500: {
    inactive: true,
    zapFrontrunProtection: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: DAI-ETH',
    subLabel: 'ETH Range: 3K⟷4.5K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-dai-eth.png',
    tokenAddress: addresses.V2.UniV3_DAI_ETH_3000_4500.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DAI_ETH_3000_4500.NewVault,
    pricesInfo: {
      DAI: ['Min price: 3046 DAI per ETH', 'Max price: 4498.9 DAI per ETH'],
      ETH: ['Min price: 0.00022228 ETH per DAI', 'Max price: 0.00032829 ETH per DAI'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DAI_ETH_3000_4500.NewVault, 'DAI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'WETH'],
  },
  UniV3_USDT_ETH_3000_4500: {
    inactive: true,
    zapFrontrunProtection: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: USDT-ETH',
    subLabel: 'ETH Range: 3K⟷4.5K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-eth-usdt.png',
    tokenAddress: addresses.V2.UniV3_USDT_ETH_3000_4500.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDT_ETH_3000_4500.NewVault,
    pricesInfo: {
      USDT: ['Min price: 3053.4 USDT per ETH', 'Max price: 4509.7 USDT per ETH'],
      ETH: ['Min price: 0.00022175 ETH per USDT', 'Max price: 0.00032751 ETH per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDT_ETH_3000_4500.NewVault, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDT', 'WETH'],
  },
  UniV3_DON_WETH_full_range: {
    inactive: true,
    subLabel: 'Donkey',
    isDegen: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: DON-WETH (full-range)',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-don-eth.png',
    tokenAddress: addresses.V2.UniV3_DON_WETH_full_range.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DON_WETH_full_range.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DON_WETH_full_range.NewVault, 'DON', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DON', 'WETH'],
    disableAutoSwap: true,
  },
  crvIbEUR: {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'CRV:Fixed Forex EUR',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/ibeur.png',
    tokenAddress: addresses.V2.convex_ibEUR.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.convex_ibEUR.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.ibEUR] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['fixedforex:eur', strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV', 'rKP3R'],
  },
  crvMIM: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    displayName: 'CRV:MIM',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png', './icons/spell.png'],
    apyTokenSymbols: ['CRV', 'CVX', 'SPELL'],
    logoUrl: './icons/mim.png',
    tokenAddress: addresses.V2.convex_MIM.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.convex_MIM.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.MIM] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['mim', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'SPELL', 'CRV'],
  },
  crvEURT: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:EURT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/eurt.png',
    tokenAddress: addresses.V2.convex_EURT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.convex_EURT.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.EURT] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['eurt', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  YEL: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/yel.png',
    tokenAddress: addresses.YEL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.YEL],
    },
  },
  fYEL: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/yel.png',
    tokenAddress: addresses.V2.yelhold_YEL.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.V2.yelhold_YEL.NewVault, '18'],
    },
  },
  sushi_YEL_ETH: {
    category: VAULT_CATEGORIES_IDS.GENERAL,
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/yel-eth.png',
    apyIconUrls: ['./icons/yel.png'],
    apyTokenSymbols: ['YEL'],
    displayName: 'YEL-ETH (SUSHI)',
    tokenAddress: addresses.V2.sushi_YEL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_YEL_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_YEL_ETH.Underlying, 'YEL', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: 'YEL',
        params: [addresses.V2.sushi_YEL_ETH.PoolId, strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'YEL', 'ETH'],
  },
  yelhold_YEL: {
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/yel.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'YEL',
    tokenAddress: addresses.V2.yelhold_YEL.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.yelhold_YEL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.V2.yelhold_YEL.Underlying],
    },
    estimateApyFunctions: [
      {
        type: 'YEL',
        params: [addresses.V2.yelhold_YEL.PoolId, strat30PercentFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'YEL'],
  },
  UniV3_ETH_sETH2: {
    zapFrontrunProtection: true,
    subLabel: 'StakeWise',
    chain: CHAINS_ID.ETH_MAINNET,
    category: [VAULT_CATEGORIES_IDS.UNIV3, VAULT_CATEGORIES_IDS.ETH20],
    displayName: 'Uniswap V3: ETH-sETH2',
    apyIconUrls: ['./icons/univ3.png', './icons/reth2.png', './icons/swise.png'],
    apyTokenSymbols: ['UNI', 'rETH2', 'SWISE'],
    logoUrl: './icons/univ3-eth-seth2.png',
    tokenAddress: addresses.V2.UniV3_ETH_sETH2.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ETH_sETH2.NewVault,
    pricesInfo: {
      ETH: ['Min price: 1.006 sETH2 per ETH', 'Max price: 1.0121 sETH2 per ETH'],
      sETH2: ['Min price: 0.98807 ETH per sETH2', 'Max price: 0.99402 ETH per sETH2'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ETH_sETH2.NewVault, 'WETH', 'sETH2'],
    },
    estimateApyFunctions: [
      {
        type: 'STAKEWISE',
        params: [
          addresses.V2.UniV3_ETH_sETH2.NewVault,
          '0x7379e81228514a1D2a6Cf7559203998E20598346',
          strat30PercentFactor,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WETH', 'sETH2', 'rETH2', 'SWISE'],
  },
  zUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/zusd.png',
    tokenAddress: addresses.zUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.zUSD],
    },
  },
  quick_IFARM_QUICK: {
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    displayName: 'Quickswap: IFARM-QUICK',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/quickswap-ifarm-quick.png',
    tokenAddress: addresses.MATIC.V2.quickswap_IFARM_QUICK.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickswap_IFARM_QUICK.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.quickswap_IFARM_QUICK.Underlying, 'miFARM', 'QUICK'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM'],
  },
  quick_ETH_USDT: {
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    displayName: 'Quickswap: ETH-USDT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/quickswap-eth-usdt.png',
    tokenAddress: addresses.MATIC.V2.quickswap_ETH_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickswap_ETH_USDT.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.quickswap_ETH_USDT.Underlying, 'pWETH', 'pUSDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.MATIC.V2.quickswap_ETH_USDT.RewardPool,
          'dQUICK',
          'quick_ETH_USDT',
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pWETH', 'pUSDT'],
  },
  sushi_USDC_ETH: {
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    logoUrl: './icons/sushi-usdc-eth.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'Sushiswap: USDC-ETH',
    tokenAddress: addresses.MATIC.V2.sushiswap_USDC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.sushiswap_USDC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.sushiswap_USDC_ETH.Underlying, 'pUSDC', 'pWETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [
          addresses.MATIC.V2.sushiswap_USDC_ETH.PoolId,
          'pUSDC',
          'pWETH',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pUSDC', 'pWETH'],
  },
  pWETH: {
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/weth.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'WETH',
    subLabel: 'IDLE',
    tokenAddress: addresses.MATIC.V2.polygon_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.polygon_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.WETH],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: [
          'pWETH',
          '0xfdA25D931258Df948ffecb66b5518299Df6527C4',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'wMATIC'],
  },
  pUSDT: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/usdt.png',
    tokenAddress: addresses.MATIC.pUSDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.USDT],
    },
  },
  pUSDC: {
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/usdc.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'USDC',
    subLabel: 'IDLE',
    tokenAddress: addresses.MATIC.V2.polygon_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.polygon_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.USDC],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: [
          'pUSDC',
          '0x1ee6470CD75D5686d0b2b90C0305Fa46fb0C89A1',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'wMATIC'],
  },
  pDAI: {
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/dai.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'DAI',
    subLabel: 'IDLE',
    tokenAddress: addresses.MATIC.V2.polygon_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.polygon_DAI.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.DAI],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: [
          'pDAI',
          '0x8a999F5A3546F8243205b2c0eCb0627cC10003ab',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'wMATIC'],
  },
  miFARM: {
    chain: CHAINS_ID.MATIC_MAINNET,
    decimals: '18',
    tokenAddress: addresses.MATIC.miFARM,
    displayName: 'miFARM',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.F_TOKEN, params: [addresses.iFARM, '18'] },
  },
  WMATIC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    decimals: '18',
    logoUrl: './icons/wmatic.png',
    tokenAddress: addresses.MATIC.WMATIC,
    displayName: 'WMATIC',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.MATIC.WMATIC, CHAINS_ID.MATIC_MAINNET],
    },
  },
  QUICK: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/quick.png',
    tokenAddress: addresses.MATIC.QUICK,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['quick'],
    },
  },
  dQUICK: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/quick.png',
    tokenAddress: addresses.MATIC.dQUICK,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dragons-quick'],
    },
  },
  LUNA: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/luna.png',
    tokenAddress: addresses.LUNA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['terra-luna'],
    },
  },
  UMA: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/uma.png',
    tokenAddress: addresses.UMA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['uma'],
    },
  },
  pUMA: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/uma.png',
    tokenAddress: addresses.MATIC.UMA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['uma'],
    },
  },
  JRT: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jrt.png',
    tokenAddress: addresses.MATIC.JRT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['jarvis-reward-token'],
    },
  },
  KNC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // not used
    tokenAddress: addresses.MATIC.KNC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['kyber-network-crystal'],
    },
  },
  REI: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/rei.png',
    tokenAddress: addresses.REI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zerogoki'],
    },
  },
  UniV3_zUSD_USDC_full_range: {
    subLabel: 'Zerogoki',
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: zUSD-USDC (full-range)',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-zusd-usdc.png',
    tokenAddress: addresses.V2.UniV3_zUSD_USDC_full_range.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_zUSD_USDC_full_range.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_zUSD_USDC_full_range.NewVault, 'zUSD', 'USDC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'zUSD', 'USDC'],
    disableAutoSwap: true,
  },
  UniV3_zUSD_ETH: {
    subLabel: 'Zerogoki',
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: zUSD-ETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-zusd-eth.png',
    tokenAddress: addresses.V2.UniV3_ZUSD_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ZUSD_ETH.NewVault,
    pricesInfo: {
      zUSD: ['Min price: 0.000052 ETH per zUSD', 'Max price: 0.00028 ETH per zUSD'],
      ETH: ['Min price: 1896.2 zUSD per ETH', 'Max price: 3496.8 ETH per zUSD'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ZUSD_ETH.NewVault, 'zUSD', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'zUSD', 'ETH'],
    disableAutoSwap: true,
  },
  UniV3_REI_ETH_full_range: {
    subLabel: 'Zerogoki',
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: REI-ETH (full-range)',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-rei-eth.png',
    tokenAddress: addresses.V2.UniV3_REI_ETH_full_range.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_REI_ETH_full_range.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_REI_ETH_full_range.NewVault, 'REI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'REI', 'ETH'],
    disableAutoSwap: true,
  },
  FOX: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/fox.png',
    tokenAddress: addresses.FOX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['shapeshift-fox-token'],
    },
  },
  LQTY: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    displayName: 'Liquity: LQTY',
    apyIconUrls: ['./icons/lusd.png'],
    apyTokenSymbols: ['LUSD', 'ETH'],
    logoUrl: './icons/lqty.png',
    tokenAddress: addresses.V2.liquity_LQTY.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.liquity_LQTY.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.V2.liquity_LQTY.Underlying],
    },
    estimateApyFunctions: [
      {
        type: 'LIQUITY',
        params: ['604800', '0.7'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LUSD', 'ETH'],
  },
  Uni_FOX_WETH: {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Shapeshift: FOX-WETH',
    fullBuyback: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/shapeshift-fox-weth.png',
    tokenAddress: addresses.V2.uni_FOX_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.uni_FOX_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.uni_FOX_WETH.Underlying, 'FOX', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.uni_FOX_WETH.RewardPool, 'FOX', 'Uni_FOX_WETH', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'FOX', 'WETH'],
  },
  crvTriCrypto: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.GENERAL,
    displayName: 'CRV:TriCrypto2',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/curve-tricrypto.png',
    tokenAddress: addresses.V2.crvThreeCrypto.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvThreeCrypto.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.crvThreeCrypto.Miner,
        addresses.V2.crvThreeCrypto.Underlying,
        '18',
        ['WBTC', 'WETH', 'USDT'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['tricrypto2', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  BAL: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/balancer.png',
    tokenAddress: addresses.BAL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['balancer'],
    },
  },
  bal_BAL_WETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.BALANCER,
    displayName: 'Balancer: BAL-WETH',
    subLabel: '80%/20%',
    apyIconUrls: ['./icons/balancer.png'],
    apyTokenSymbols: ['BAL'],
    logoUrl: './icons/bal-bal-eth.png',
    tokenAddress: addresses.V2.bal_BAL_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.bal_BAL_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.bal_BAL_WETH.Underlying,
        addresses.V2.bal_BAL_WETH.PoolId,
        CHAINS_ID.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.V2.bal_BAL_WETH.Underlying,
          addresses.V2.bal_BAL_WETH.PoolId,
          '25750',
          strat30PercentFactor,
          CHAINS_ID.ETH_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL', 'WETH'],
  },
  bal_DAI_WETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Balancer: DAI-WETH',
    subLabel: '40%/60%',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/bal-dai-eth.png',
    tokenAddress: addresses.V2.bal_DAI_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.bal_DAI_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.bal_DAI_WETH.Underlying,
        addresses.V2.bal_DAI_WETH.PoolId,
        CHAINS_ID.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.V2.bal_DAI_WETH.Underlying,
          addresses.V2.bal_DAI_WETH.PoolId,
          '15000',
          strat30PercentFactor,
          CHAINS_ID.ETH_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'WETH'],
  },
  bal_USDC_WETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Balancer: USDC-WETH',
    subLabel: '50%/50%',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/bal-usdc-eth.png',
    tokenAddress: addresses.V2.bal_USDC_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.bal_USDC_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.bal_USDC_WETH.Underlying,
        addresses.V2.bal_USDC_WETH.PoolId,
        CHAINS_ID.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.V2.bal_USDC_WETH.Underlying,
          addresses.V2.bal_USDC_WETH.PoolId,
          '1100',
          strat30PercentFactor,
          CHAINS_ID.ETH_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'WETH'],
  },
  bal_USDT_WETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Balancer: USDT-WETH',
    subLabel: '50%/50%',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/bal-usdt-eth.png',
    tokenAddress: addresses.V2.bal_USDT_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.bal_USDT_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.bal_USDT_WETH.Underlying,
        addresses.V2.bal_USDT_WETH.PoolId,
        CHAINS_ID.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.V2.bal_USDT_WETH.Underlying,
          addresses.V2.bal_USDT_WETH.PoolId,
          '120',
          strat30PercentFactor,
          CHAINS_ID.ETH_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDT', 'WETH'],
  },
  bal_WBTC_WETH: {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Balancer: WBTC-WETH',
    subLabel: '50%/50%',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/bal-wbtc-eth.png',
    tokenAddress: addresses.V2.bal_WBTC_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.bal_WBTC_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.bal_WBTC_WETH.Underlying,
        addresses.V2.bal_WBTC_WETH.PoolId,
        CHAINS_ID.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.V2.bal_WBTC_WETH.Underlying,
          addresses.V2.bal_WBTC_WETH.PoolId,
          '15000',
          strat30PercentFactor,
          CHAINS_ID.ETH_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WBTC', 'WETH'],
  },
  UniV3_USDC_ETH: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: USDC-ETH',
    subLabel: 'ETH Range: 1.9K⟷3.5K',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-usdc-eth.png',
    tokenAddress: addresses.V2.UniV3_USDC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDC_ETH.NewVault,
    pricesInfo: {
      USDC: ['Min price: 1980 USDC per ETH', 'Max price: 3580 USDC per ETH'],
      ETH: ['Min price: 0.000279 ETH per USDC', 'Max price: 0.000505 ETH per USDC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDC_ETH.NewVault, 'USDC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'WETH'],
  },
  UniV3_ETH_USDT: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: ETH-USDT',
    subLabel: 'ETH Range: 1.9K⟷3.5K',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-eth-usdt.png',
    tokenAddress: addresses.V2.UniV3_ETH_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ETH_USDT.NewVault,
    pricesInfo: {
      ETH: ['Min price: 1980 USDT per ETH', 'Max price: 3580 USDT per ETH'],
      USDT: ['Min price: 0.000279 ETH per USDT', 'Max price: 0.000505 ETH per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ETH_USDT.NewVault, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WETH', 'USDT'],
  },
  UniV3_DAI_ETH: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: DAI-ETH',
    subLabel: 'ETH Range: 1.9K⟷3.5K',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-dai-eth.png',
    tokenAddress: addresses.V2.UniV3_DAI_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DAI_ETH.NewVault,
    pricesInfo: {
      DAI: ['Min price: 0.000279 ETH per DAI', 'Max price: 0.000505 ETH per DAI'],
      ETH: ['Min price: 1980 DAI per ETH', 'Max price: 3580 DAI per ETH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DAI_ETH.NewVault, 'DAI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'WETH'],
  },
  Univ3_BUSD_USDC: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: BUSD-USDC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-busd-usdc.png',
    tokenAddress: addresses.V2.Univ3_BUSD_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.Univ3_BUSD_USDC.NewVault,
    pricesInfo: {
      BUSD: ['Min price: 0.999 BUSD per USDC', 'Max price: 1.000 BUSD per USDC'],
      USDC: ['Min price: 1.000 USDC per BUSD', 'Max price: 0.999 USDC per BUSD'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.Univ3_BUSD_USDC.NewVault, 'BUSD', 'USDC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BUSD', 'USDC'],
  },
  Univ3_renBTC_wBTC: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: RENBTC-WBTC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-renbtc-wbtc.png',
    tokenAddress: addresses.V2.Univ3_renBTC_wBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.Univ3_renBTC_wBTC.NewVault,
    pricesInfo: {
      RENBTC: ['Min price: 0.999 RENBTC per WBTC', 'Max price: 1.001 RENBTC per WBTC'],
      WBTC: ['Min price: 0.999 WBTC per RENBTC', 'Max price: 1.001 WBTC per RENBTC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.Univ3_renBTC_wBTC.NewVault, 'RENBTC', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RENBTC', 'WBTC'],
  },
  UniV3_UST_USDT: {
    zapFrontrunProtection: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: [VAULT_CATEGORIES_IDS.UNIV3, VAULT_CATEGORIES_IDS.STABLECOINS],
    displayName: 'Uniswap V3: UST-USDT',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-ust-usdt.png',
    tokenAddress: addresses.V2.UniV3_UST_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_UST_USDT.NewVault,
    pricesInfo: {
      UST: ['Min price: 0.9986 UST per USDT', 'Max price 1.0006 UST per USDT'],
      USDT: ['Min price: 1.0014 USDT per UST', 'Max price 0.9994 USDT per UST'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_UST_USDT.NewVault, 'UST', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'UST', 'USDT'],
  },
  UniV3_USDC_USDT: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: USDC-USDT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-usdc-usdt.png',
    tokenAddress: addresses.V2.UniV3_USDC_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDC_USDT.NewVault,
    pricesInfo: {
      USDC: ['Min price: 0.999 USDT per USDC', 'Max price: 1.001 USDT per USDC'],
      USDT: ['Min price: 0.999 USDC per USDT', 'Max price: 1.001 USDC per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDC_USDT.NewVault, 'USDC', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'USDT'],
  },
  UniV3_WBTC_ETH: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.UNIV3,
    displayName: 'Uniswap V3: WBTC-ETH',
    apyIconUrls: ['./icons/univ3.png'],
    apyTokenSymbols: ['UNI'],
    logoUrl: './icons/univ3-wbtc-eth.png',
    tokenAddress: addresses.V2.UniV3_WBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_WBTC_ETH.NewVault,
    pricesInfo: {
      ETH: ['Min price: 0.051 BTC per ETH', 'Max price: 0.101 BTC per ETH'],
      WBTC: ['Min price: 19.607 ETH per WBTC', 'Max price: 9.901 ETH per WBTC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_WBTC_ETH.NewVault, 'WBTC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WBTC', 'WETH'],
  },
  UniV3_DAI_USDC: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: DAI-USDC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-dai-usdc.png',
    tokenAddress: addresses.V2.UniV3_DAI_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DAI_USDC.NewVault,
    pricesInfo: {
      DAI: ['Min price: 0.9994 USDC per DAI', 'Max price: 1.0024 USDC per DAI'],
      USDC: ['Min price: 0.9976 DAI per USDC', 'Max price: 1.0006 DAI per USDC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DAI_USDC.NewVault, 'DAI', 'USDC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    migrationInfo: {
      lpTokenAddress: '0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5',
      lpTokenName: 'USDC-DAI',
      lpTokenDecimals: '18',
    },
    zapFrontrunProtection: true,
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'USDC'],
  },
  UniV3_UNI_ETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: UNI-ETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-uni-eth.png',
    tokenAddress: addresses.V2.UniV3_UNI_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_UNI_ETH.NewVault,
    pricesInfo: {
      UNI: ['Min price: 0.005 ETH per UNI', 'Max price: 0.014 ETH per UNI'],
      ETH: ['Min price: 71.4 UNI per ETH', 'Max price: 200 UNI per ETH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_UNI_ETH.NewVault, 'UNI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'UNI', 'WETH'],
  },
  UniV3_FCASH_USDC: {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: FCASH-USDC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-fcash-usdc.png',
    tokenAddress: addresses.V2.UniV3_FCASH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_FCASH_USDC.NewVault,
    pricesInfo: {
      FCASH: ['Min price: 0.952 FCASH per USDC', 'Max price: 1.25 FCASH per USDC'],
      USDC: ['Min price: 0.8 USDC per FCASH', 'Max price: 1.05 USDC per FCASH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_FCASH_USDC.NewVault, 'FCASH', 'USDC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'FCASH', 'USDC'],
  },
  lfBTC: {
    logoUrl: './icons/dai.png', // does not matter
    tokenAddress: addresses.lfBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.lfBTC] },
  },
  LIFT: {
    logoUrl: './icons/dai.png', // does not matter
    tokenAddress: addresses.LIFT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.SUSHISWAP_PAIR,
      params: [addresses.LIFT, addresses.lfBTC, '18'],
    },
  },
  TBTC: {
    logoUrl: '',
    tokenAddress: addresses.TBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.TBTC] },
  },
  '1INCH': {
    logoUrl: './icons/1inch.png',
    tokenAddress: addresses['1INCH'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses['1INCH']] },
  },
  venusWBNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'WBNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-wbnb.png',
    tokenAddress: addresses.BSC.V2.venus_WBNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_WBNB.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['wbnb'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vBNB', profitSharingCut8Percent],
      },
    ],
  },
  EPS: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/eps.png',
    tokenAddress: addresses.BSC.EPS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['ellipsis'] },
  },
  BELT: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/belt.png',
    tokenAddress: addresses.BSC.BELT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['belt'] },
  },
  belt_BNB: {
    inactive: true,
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: 'BELT:BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/belt-bnb.png',
    tokenAddress: addresses.BSC.V2.belt_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.belt_BNB.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['wbnb'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BELT,
        params: [addresses.BSC.V2.belt_BNB.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  belt_ETH: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'BELT:ETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/belt-eth.png',
    tokenAddress: addresses.BSC.V2.belt_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.belt_ETH.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BELT,
        params: [addresses.BSC.V2.belt_ETH.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  belt_BTCB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'BELT:BTCB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/belt-btcb.png',
    tokenAddress: addresses.BSC.V2.belt_BTCB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.belt_BTCB.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BELT,
        params: [addresses.BSC.V2.belt_BTCB.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  belt_BELT_BNB: {
    inactive: true,
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: 'BELT-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/belt-belt-bnb.png',
    tokenAddress: addresses.BSC.V2.belt_BELT_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.belt_BELT_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.belt_BELT_BNB.Underlying, 'BELT', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BELT,
        params: [addresses.BSC.V2.belt_BELT_BNB.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  popsicle_ICE_BNB: {
    inactive: true,
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: 'ICE-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/ice-bnb.png',
    tokenAddress: addresses.BSC.V2.popsicle_ICE_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.popsicle_ICE_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.popsicle_ICE_BNB.Underlying, 'ICE', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.POPSICLE,
        params: [
          addresses.BSC.V2.popsicle_ICE_BNB.PoolId,
          'ICE',
          'wBNB',
          profitSharingCut8Percent,
          CHAINS_ID.BSC_MAINNET,
        ],
      },
    ],
  },
  USDC: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'USDC',
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    logoUrl: './icons/usdc.png',
    apyIconUrls: ['./icons/comp.png', './icons/idle.png'],
    apyTokenSymbols: ['COMP', 'IDLE'],
    tokenAddress: addresses.USDC,
    decimals: '6',
    vaultAddress: addresses.V2.USDC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDC] },
    cmcRewardTokenSymbols: ['FARM', 'USDC'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: ['USDC', '0x5274891bEC421B39D23760c04A6755eCB444797C', '0.7'],
      },
    ],
  },
  DAI: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'DAI',
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    logoUrl: './icons/dai.png',
    apyIconUrls: ['./icons/comp.png', './icons/idle.png'],
    apyTokenSymbols: ['COMP', 'IDLE'],
    tokenAddress: addresses.DAI,
    decimals: '18',
    vaultAddress: addresses.V2.DAI.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DAI] },
    cmcRewardTokenSymbols: ['FARM', 'DAI'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: ['DAI', '0x3fe7940616e5bc47b0775a0dccf6237893353bb4', '0.7'],
      },
    ],
  },
  USDT: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'USDT',
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    logoUrl: './icons/usdt.png',
    apyIconUrls: ['./icons/comp.png', './icons/idle.png'],
    apyTokenSymbols: ['COMP', 'IDLE'],
    tokenAddress: addresses.USDT,
    decimals: '6',
    vaultAddress: addresses.V2.USDT.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDT] },
    cmcRewardTokenSymbols: ['FARM', 'USDT'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: ['USDT', '0xF34842d05A1c888Ca02769A633DF37177415C2f8', '0.7'],
      },
    ],
  },
  crvUSDP: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    displayName: 'CRV:USDP',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png', './icons/duck.png'],
    apyTokenSymbols: ['CRV', 'CVX', 'DUCK'],
    logoUrl: './icons/curve-usdp.png',
    tokenAddress: addresses.V2.crvUSDP.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvUSDP.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDP] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['usdp', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'DUCK', 'CRV'],
  },
  MUSE: {
    logoUrl: './icons/muse.png',
    tokenAddress: addresses.MUSE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.MUSE],
    },
  },
  NUDES20: {
    logoUrl: './icons/nudes20.png',
    tokenAddress: addresses.NUDES20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.NUDES20, addresses.WETH],
    },
  },
  MASK20: {
    logoUrl: './icons/mask20.png',
    tokenAddress: addresses.MASK20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.MASK20, addresses.WETH],
    },
  },
  ROPE20: {
    logoUrl: './icons/rope20.png',
    tokenAddress: addresses.ROPE20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.ROPE20, addresses.WETH],
    },
  },
  MCAT20: {
    logoUrl: './icons/mooncat20.png',
    tokenAddress: addresses.MCAT20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.MCAT20, addresses.WETH],
    },
  },
  crvHBTC: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.BTC,
    displayName: 'CRV:HBTC',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/curve-hbtc.png',
    tokenAddress: addresses.crvHBTC,
    decimals: '18',
    vaultAddress: addresses.V2.crvHBTC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.HBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['hbtc', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvOBTC: {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'CRV:OBTC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-obtc.png',
    tokenAddress: addresses.V2.crvOBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvOBTC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['obtc', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'BOR', 'CRV'],
  },
  TBTCMixed: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:TBTC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/tbtc-mixed.png',
    tokenAddress: addresses.TBTC_MIXED,
    decimals: '18',
    vaultAddress: addresses.V2.TBTCMixed.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['tbtc', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'KEEP', 'CRV', 'CVX'],
  },
  CRVRENWBTC: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.BTC,
    logoUrl: './icons/crvrenwbtc.png',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    displayName: 'CRV:RENWBTC',
    tokenAddress: addresses.CRVRENWBTC,
    decimals: '18',
    vaultAddress: addresses.V2.crvRenWBTC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] }, // TODO: add price calculation for CRVRENWBTC
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['ren', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  WBTC: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'WBTC',
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/wbtc.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.WBTC,
    decimals: '8',
    vaultAddress: addresses.V2.WBTC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    cmcRewardTokenSymbols: ['FARM', 'WBTC'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: ['WBTC', '0x8C81121B15197fA0eEaEE1DC75533419DcfD3151', '0.7'],
      },
    ],
  },
  crvSTETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.ETH20,
    displayName: 'CRV:STETH',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png', './icons/ldo.png'],
    apyTokenSymbols: ['CRV', 'CVX', 'LDO'],
    logoUrl: './icons/curve-steth.png',
    tokenAddress: addresses.V2.crvSTETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvSTETH.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['steth', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'LDO', 'CRV'],
  },
  sETH2: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/seth2.png',
    tokenAddress: addresses.sETH2,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.sETH2],
    },
  },
  NAWA: {
    logoUrl: './icons/nawa.png',
    tokenAddress: addresses.NAWA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.NAWA],
    },
  },
  KBTC: {
    logoUrl: './icons/kbtc.png',
    tokenAddress: addresses.KBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.KBTC],
    },
  },
  GME: {
    logoUrl: './icons/gme.png',
    tokenAddress: addresses.GME,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.GME],
    },
  },
  INDEX: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/index.png',
    tokenAddress: addresses.INDEX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.INDEX],
    },
  },
  'ETH-MVI': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/eth-mvi.png',
    apyIconUrls: [],
    displayName: 'ETH-MVI',
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.uni_ETH_MVI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.uni_ETH_MVI.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'MVI'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.uni_ETH_MVI.Underlying, 'WETH', 'MVI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.uni_ETH_MVI.RewardPool, 'INDEX', 'ETH-MVI', strat30PercentFactor],
      },
    ],
  },
  MVI: {
    logoUrl: './icons/mvi.png',
    tokenAddress: addresses.MVI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.MVI] },
  },
  KLONDIKE_KXUSD_DAI: {
    chain: CHAINS_ID.ETH_MAINNET,
    fullBuyback: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'KXUSD-DAI',
    logoUrl: './icons/klon-kxusd-dai.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.klondike_KXUSD_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.klondike_KXUSD_DAI.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.klondike_KXUSD_DAI.Underlying, 'KXUSD', 'DAI'],
    },
    cmcRewardTokenSymbols: ['iFARM', 'KXUSD', 'DAI'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.V2.klondike_KXUSD_DAI.RewardPool,
          'KLONX',
          'KLONDIKE_KXUSD_DAI',
          strat30PercentFactor,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  KXUSD: {
    logoUrl: './icons/kxusd.png',
    tokenAddress: addresses.KXUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.KXUSD, addresses.DAI, '18'],
    },
  },
  PHTR: {
    logoUrl: './icons/phtr.png',
    tokenAddress: addresses.PHTR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.PHTR],
    },
  },
  'SUSHI-PHTR-FARM': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/sushi-phtr-farm.png',
    subLabel: 'Phuture Finance',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'PHTR-FARM',
    tokenAddress: addresses.V2.sushi_PHTR_FARM.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_PHTR_FARM.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_PHTR_FARM.Underlying, 'PHTR', 'FARM'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'PHTR'],
  },
  'SUSHI-PHTR-ETH': {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/sushi-phtr-weth.png',
    subLabel: 'Phuture Finance',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'PHTR-ETH',
    tokenAddress: addresses.V2.sushi_PHTR_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_PHTR_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_PHTR_ETH.Underlying, 'PHTR', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'PHTR', 'WETH'],
  },
  'SUSHI-SUSHI-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/sushi-eth.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ETH-SUSHI',
    tokenAddress: addresses.V2.sushi_SUSHI_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_SUSHI_WETH.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'SUSHI'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_SUSHI_WETH.Underlying, 'SUSHI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.SUSHI, 'SUSHI', 'WETH', '0.7', null],
      },
    ],
  },
  'SUSHI-ETH-PERP': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/sushi-perp.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ETH-PERP',
    tokenAddress: addresses.V2.sushi_PERP_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_PERP_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_PERP_ETH.Underlying, 'WETH', 'PERP'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.PERP, 'WETH', 'PERP', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'PERP'],
  },
  'SUSHI-ETH-DAI': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/sushi-dai.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ETH-DAI',
    tokenAddress: addresses.sushi_DAI_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_DAI_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_DAI_WETH, 'WETH', 'DAI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.DAI, 'WETH', 'DAI', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DAI'],
  },
  'SUSHI-ETH-USDC': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.SUSHI,
    logoUrl: './icons/sushi-usdc.png',
    apyIconUrls: ['./icons/sushi.png'],
    apyTokenSymbols: ['SUSHI'],
    displayName: 'ETH-USDC',
    tokenAddress: addresses.sushi_USDC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDC_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDC_WETH, 'WETH', 'USDC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.USDC, 'WETH', 'USDC', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDC'],
  },
  'SUSHI-ETH-USDT': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/sushi-usdt.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ETH-USDT',
    tokenAddress: addresses.sushi_USDT_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDT_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDT_WETH, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.USDT, 'WETH', 'USDT', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDT'],
  },
  'SUSHI-ETH-WBTC': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.SUSHI,
    logoUrl: './icons/sushi-wbtc.png',
    apyIconUrls: ['./icons/sushi.png'],
    apyTokenSymbols: ['SUSHI'],
    displayName: 'ETH-WBTC',
    tokenAddress: addresses.sushi_WBTC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_WBTC_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_WBTC_WETH, 'WETH', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.WBTC, 'WETH', 'WBTC', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'WBTC'],
  },
  'SUSHI-ETH-UST': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/sushi-ust.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ETH-UST',
    tokenAddress: addresses.sushi_UST_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_UST_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_UST_WETH, 'WETH', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.UST, 'WETH', 'UST', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'UST'],
  },
  SUSHI_HODL: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    displayName: 'SUSHI HODL',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    logoUrl: './icons/sushi.png',
    tokenAddress: addresses.V2.SUSHI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.SUSHI.NewVault,
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.SUSHI] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NATIVE_SUSHI,
        params: [],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'SUSHI'],
  },
  'SUSHI-ETH-DAI-HODL': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    logoUrl: './icons/sushi-dai.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-DAI HODL',
    tokenAddress: addresses.sushi_DAI_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_DAI_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'DAI'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_DAI_WETH, 'WETH', 'DAI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.DAI, 'WETH', 'DAI', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  'SUSHI-ETH-USDC-HODL': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    logoUrl: './icons/sushi-usdc.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-USDC HODL',
    tokenAddress: addresses.sushi_USDC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDC_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'USDC'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDC_WETH, 'WETH', 'USDC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDC, 'WETH', 'USDC', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  'SUSHI-ETH-USDT-HODL': {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/sushi-usdt.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ETH-USDT HODL',
    tokenAddress: addresses.sushi_USDT_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDT_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'USDT'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDT_WETH, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDT, 'WETH', 'USDT', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  'SUSHI-ETH-WBTC-HODL': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    logoUrl: './icons/sushi-wbtc.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-WBTC HODL',
    tokenAddress: addresses.sushi_WBTC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_WBTC_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'WBTC'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_WBTC_WETH, 'WETH', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.WBTC, 'WETH', 'WBTC', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-DAI': {
    chain: CHAINS_ID.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-DAI-HODL',
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    subLabel: '(migrated from 1INCH)',
    logoUrl: './icons/sushi-dai.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-DAI',
    tokenAddress: addresses.V2.oneInch_ETH_DAI.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_DAI.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DAI'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_DAI_WETH, 'WETH', 'DAI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.DAI, 'WETH', 'DAI', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-USDC': {
    chain: CHAINS_ID.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-USDC-HODL',
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    subLabel: '(migrated from 1INCH)',
    logoUrl: './icons/sushi-usdc.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-USDC',
    tokenAddress: addresses.V2.oneInch_ETH_USDC.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_USDC.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDC'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDC_WETH, 'WETH', 'USDC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDC, 'WETH', 'USDC', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-USDT': {
    chain: CHAINS_ID.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-USDT-HODL',
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    subLabel: '(migrated from 1INCH)',
    logoUrl: './icons/sushi-usdt.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-USDT',
    tokenAddress: addresses.V2.oneInch_ETH_USDT.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_USDT.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDT'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDT_WETH, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDT, 'WETH', 'USDT', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-WBTC': {
    chain: CHAINS_ID.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-WBTC-HODL',
    category: VAULT_CATEGORIES_IDS.SUSHI_HODL,
    subLabel: '(migrated from 1INCH)',
    logoUrl: './icons/sushi-wbtc.png',
    apyIconUrls: ['./icons/xsushi.svg', './icons/aave.svg'],
    apyTokenSymbols: ['XSUSHI', 'AAVE'],
    displayName: 'ETH-WBTC',
    tokenAddress: addresses.V2.oneInch_ETH_WBTC.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_WBTC.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'WBTC'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_WBTC_WETH, 'WETH', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.WBTC, 'WETH', 'WBTC', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  'MUSE-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    category: VAULT_CATEGORIES_IDS.NFT,
    displayName: 'MUSE-ETH',
    apyIconUrls: ['./icons/muse.png'],
    apyTokenSymbols: ['MUSE'],
    logoUrl: './icons/nft20-muse.png',
    tokenAddress: addresses.V2.nft20_Muse.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Muse.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MUSE'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Muse.Underlying, 'WETH', 'MUSE'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Muse.PoolId, 'MUSE-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  'DUDES20-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    category: VAULT_CATEGORIES_IDS.NFT,
    displayName: 'DUDES20-ETH',
    apyIconUrls: ['./icons/muse.png'],
    apyTokenSymbols: ['MUSE'],
    logoUrl: './icons/nft20-dudes20.png',
    tokenAddress: addresses.V2.nft20_Dudes.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Dudes.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'NUDES20'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Dudes.Underlying, 'WETH', 'NUDES20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Dudes.PoolId, 'DUDES20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  'MASK20-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'MASK20-ETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/nft20-mask20.png',
    tokenAddress: addresses.V2.nft20_Mask.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Mask.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MASK20'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Mask.Underlying, 'WETH', 'MASK20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Mask.PoolId, 'MASK20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  'MOONCAT20-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    category: VAULT_CATEGORIES_IDS.NFT,
    displayName: 'MCAT20-ETH',
    apyIconUrls: ['./icons/muse.png'],
    apyTokenSymbols: ['MUSE'],
    logoUrl: './icons/nft20-mooncat20.png',
    tokenAddress: addresses.V2.nft20_Mooncat.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Mooncat.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MCAT20'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Mooncat.Underlying, 'WETH', 'MCAT20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Mooncat.PoolId, 'MOONCAT20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  crvHUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:HUSD',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-husd.png',
    tokenAddress: addresses.crvHUSD,
    decimals: '18',
    vaultAddress: addresses.V2.crvHUSD.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.HUSD] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['husd', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  YCRV: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'YCRV',
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/ycrv.png',
    tokenAddress: addresses.YCRV,
    decimals: '18',
    vaultAddress: addresses.V2.YCRV.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.06'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['ypool', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  ThreePool: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: '3CRV',
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/three-pool.png',
    tokenAddress: addresses.THREE_POOL,
    decimals: '18',
    vaultAddress: addresses.V2.ThreePool.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.004'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['3pool', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvCOMPOUND: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:COMPOUND',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-compound.png',
    tokenAddress: addresses.crvCOMPOUND,
    decimals: '18',
    vaultAddress: addresses.V2.crvCOMPOUND.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.0381'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['compound', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvBUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:BUSD',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-busd.png',
    tokenAddress: addresses.crvBUSD,
    decimals: '18',
    vaultAddress: addresses.V2.crvBUSD.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.0623'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['busd', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvUSDN: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.STABLECOINS,
    displayName: 'CRV:USDN',
    apyIconUrls: ['./icons/curve.png', './icons/cvx.png'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: './icons/curve-usdn.png',
    tokenAddress: addresses.crvUSDN,
    decimals: '18',
    vaultAddress: addresses.V2.crvUSDN.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.004'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['usdn', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  UNI_FARM_USDC: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'FARM/USDC',
    logoUrl: './icons/farm-usdc.png',
    tokenAddress: addresses.UNI_FARM_USDC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.UNI_FARM_USDC, 'USDC', 'FARM'],
    },
  },
  UNI: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'UNISWAP',
    logoUrl: './icons/univ3.png',
    tokenAddress: addresses.UNI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.UNI],
    },
  },
  FARM_GRAIN_LP: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'FARM/GRAIN',
    logoUrl: './icons/farm-grain.png',
    tokenAddress: addresses.FARM_GRAIN_LP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.FARM_GRAIN_LP, 'GRAIN', 'FARM'],
    },
  },
  FARMSteadUSDC: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/farmstead-usdc.png',
    tokenAddress: addresses.FARMSteadUSDC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.FARMSTEAD_USDC,
      params: [],
    },
  },
  FARM_WETH_LP: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/farm-weth.png',
    tokenAddress: addresses.FARM_WETH_LP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.FARM_WETH_LP, 'WETH', 'FARM'],
    },
  },
  GRAIN: {
    logoUrl: './icons/farm.png',
    tokenAddress: addresses.GRAIN,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.TOKEN_TO_USD_FARM, params: [addresses.GRAIN] },
  },
  BASV2: {
    logoUrl: './icons/bas.png',
    tokenAddress: addresses.BASV2,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.BASV2, addresses.DAI, '18'],
    },
  },
  BAS: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/bas.png',
    tokenAddress: addresses.BAS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.BAS, addresses.DAI, '18'],
    },
  },
  BSG: {
    logoUrl: './icons/bsg.png',
    tokenAddress: addresses.BSG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.BSG, addresses.DAI, '18'],
    },
  },
  BSGS: {
    logoUrl: './icons/bsgs.png',
    tokenAddress: addresses.BSGS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.BSGS, addresses.DAI, '18'],
    },
  },
  MIS: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/mis.png',
    tokenAddress: addresses.MIS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['mithril-share'] },
  },
  MIC: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/mic.png',
    tokenAddress: addresses.MIC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['0.08'] },
  },
  LINK: {
    logoUrl: './icons/chainlink.png',
    tokenAddress: addresses.LINK,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.LINK] },
  },
  SUSHI: {
    logoUrl: './icons/sushi.png',
    tokenAddress: addresses.SUSHI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.SUSHI] },
  },
  PERP: {
    logoUrl: './icons/sushi.png',
    tokenAddress: addresses.PERP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.PERP] },
  },
  DPI: {
    logoUrl: './icons/dpi.png',
    tokenAddress: addresses.DPI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DPI] },
  },
  sUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/susd.png',
    tokenAddress: addresses.sUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.sUSD] },
  },
  CRV: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/curve.png',
    tokenAddress: addresses.CRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.CRV] },
  },
  cvxCRV: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.cvxCRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.cvxCRV] },
  },
  HARVEST_AP: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.HARVEST_AP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.MANUAL,
      params: ['0'],
    },
  },
  crvEURS: {
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'CRV:EURS',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-eurs.png',
    tokenAddress: addresses.V2.crvEURS.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvEURS.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.EURS] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['eurs', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvGUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:GUSD',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-gusd.png',
    tokenAddress: addresses.V2.crvGUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvGUSD.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.GUSD] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CRV_GENERAL,
        params: [
          'crvGUSD', // itself
          addresses.V2.crvGUSD.GaugePool, // gauge pool
          '0x4f062658EaAF2C1ccf8C8e36D6824CDf41167956', // swap address
          strat30PercentFactor,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CRV'],
  },
  crvUST: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:UST',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-ust.png',
    tokenAddress: addresses.V2.crvUST.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvUST.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.UST] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['ust', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  IFARM: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/ifarm.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'iFARM',
    tokenAddress: addresses.iFARM,
    decimals: '18',
    vaultAddress: addresses.iFARM,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.iFARM, '18'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  KLON: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/klon.png',
    tokenAddress: addresses.KLON,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.KLON],
    },
  },
  KLONX: {
    logoUrl: './icons/klon.png',
    tokenAddress: addresses.KLONX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.KLONX],
    },
  },
  bUSD: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    logoUrl: './icons/busd.png',
    tokenAddress: addresses.BSC.bUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['binance-usd'],
    },
  },
  bUSDT: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/busdt.png',
    tokenAddress: addresses.BSC.bUSDT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
  },
  pancake_BUSD_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'BUSD-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/pancake-busd-bnb.png',
    tokenAddress: addresses.BSC.V2.pancake_BUSD_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.pancake_BUSD_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.pancake_BUSD_BNB.Underlying, 'bUSD', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PANCAKE,
        params: [
          addresses.BSC.V2.pancake_BUSD_BNB.PoolId,
          'bUSD',
          'wBNB',
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  pancake_CAKE: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.PANCAKE,
    displayName: 'CAKE',
    apyIconUrls: ['./icons/cake.png'],
    apyTokenSymbols: ['CAKE'],
    logoUrl: './icons/cake.png',
    tokenAddress: addresses.BSC.V2.pancake_CAKE.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.pancake_CAKE.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['pancakeswap-token'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PANCAKE,
        params: [addresses.BSC.V2.pancake_CAKE.PoolId, null, null, profitSharingCut8Percent],
      },
    ],
  },
  pancake_ETH_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'ETH-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/pancake-eth-bnb.png',
    tokenAddress: addresses.BSC.V2.pancake_ETH_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.pancake_ETH_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.pancake_ETH_BNB.Underlying, 'bETH', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PANCAKE,
        params: [addresses.BSC.V2.pancake_ETH_BNB.PoolId, 'bETH', 'wBNB', profitSharingCut8Percent],
      },
    ],
  },
  pancake_USDT_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.PANCAKE,
    displayName: 'USDT-BNB',
    apyIconUrls: ['./icons/cake.png'],
    apyTokenSymbols: ['CAKE'],
    logoUrl: './icons/pancake-usdt-bnb.png',
    tokenAddress: addresses.BSC.V2.pancake_USDT_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.pancake_USDT_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.pancake_USDT_BNB.Underlying, 'bUSDT', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PANCAKE,
        params: [
          addresses.BSC.V2.pancake_USDT_BNB.PoolId,
          'bUSDT',
          'wBNB',
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  pancake_XVS_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'XVS-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/pancake-xvs-bnb.png',
    tokenAddress: addresses.BSC.V2.pancake_XVS_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.pancake_XVS_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.pancake_XVS_BNB.Underlying, 'XVS', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PANCAKE,
        params: [addresses.BSC.V2.pancake_XVS_BNB.PoolId, 'XVS', 'wBNB', profitSharingCut8Percent],
      },
    ],
  },
  pancake_CAKE_BNB: {
    inactive: true,
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: 'CAKE-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/pancake-cake-bnb.png',
    tokenAddress: addresses.BSC.V2.pancake_CAKE_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.pancake_CAKE_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.pancake_CAKE_BNB.Underlying, 'CAKE', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PANCAKE,
        params: [
          addresses.BSC.V2.pancake_CAKE_BNB.PoolId,
          'CAKE',
          'wBNB',
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  venusDAI: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'DAI',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/dai.png',
    tokenAddress: addresses.BSC.V2.venus_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_DAI.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DAI] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vDAI', profitSharingCut8Percent],
      },
    ],
  },
  venusUSDC: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'USDC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/usdc.png',
    tokenAddress: addresses.BSC.V2.venus_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_USDC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vUSDC', profitSharingCut8Percent],
      },
    ],
  },
  venusUSDT: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'USDT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/usdt.png',
    tokenAddress: addresses.BSC.V2.venus_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_USDT.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDT] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vUSDT', profitSharingCut8Percent],
      },
    ],
  },
  venusBUSD: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'BUSD',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-busd.png',
    tokenAddress: addresses.BSC.V2.venus_BUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_BUSD.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['binance-usd'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vBUSD', profitSharingCut8Percent],
      },
    ],
  },
  venusXVS: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'XVS',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-xvs.png',
    tokenAddress: addresses.BSC.V2.venus_XVS.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_XVS.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['venus'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vXVS', profitSharingCut8Percent],
      },
    ],
  },
  venusVAI: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'VAI',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-vai.png',
    tokenAddress: addresses.BSC.V2.venus_VAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_VAI.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['vai'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_VAI_STAKING,
        params: [addresses.BSC.V2.venus_VAI.RewardPool, '499.99', profitSharingCut8Percent],
      },
    ],
  },
  venusBETH: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'BETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-beth.png',
    tokenAddress: addresses.BSC.V2.venus_BETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_BETH.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['weth'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vBETH', profitSharingCut8Percent],
      },
    ],
  },
  venusETH: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'ETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-eth.png',
    tokenAddress: addresses.BSC.V2.venus_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_ETH.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['weth'] }, // Should be ok since its pegged to ETH price
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vETH', profitSharingCut8Percent],
      },
    ],
  },
  venusBTCB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'BTCB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/venus-btcb.png',
    tokenAddress: addresses.BSC.V2.venus_BTCB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.venus_BTCB.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS,
        params: ['vBTC', profitSharingCut8Percent],
      },
    ],
  },
  bFARM: {
    chain: CHAINS_ID.BSC_MAINNET,
    decimals: '18',
    tokenAddress: addresses.BSC.bFARM,
    displayName: 'bFARM',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.FARM] },
  },
  ampliFARM: {
    chain: CHAINS_ID.BSC_MAINNET,
    decimals: '18',
    tokenAddress: addresses.BSC.ampliFARM,
    displayName: 'ampliFARM',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.FARM] },
  },
  bETH: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/beth.png',
    tokenAddress: addresses.BSC.bETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID, // Should be ok since its pegged to ETH price
      params: ['weth'],
    },
  },
  wBNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/wbnb.png',
    tokenAddress: addresses.BSC.wBNB,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wbnb'],
    },
  },
  CAKE: {
    chain: CHAINS_ID.BSC_MAINNET,
    decimals: '18',
    tokenAddress: addresses.BSC.CAKE,
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['pancakeswap-token'],
    },
  },
  XVS: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    logoUrl: './icons/xvs.png',
    tokenAddress: addresses.BSC.XVS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['venus'],
    },
  },
  goose_EGG_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.GOOSE,
    displayName: 'EGG-BNB',
    apyIconUrls: ['./icons/egg.png'],
    apyTokenSymbols: ['EGG'],
    logoUrl: './icons/egg-bnb.png',
    tokenAddress: addresses.BSC.V2.goose_EGG_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.goose_EGG_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.goose_EGG_BNB.Underlying, 'EGG', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.GOOSE,
        params: [addresses.BSC.V2.goose_EGG_BNB.PoolId, 'EGG', 'wBNB', profitSharingCut8Percent],
      },
    ],
  },
  goose_EGG_BUSD: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.GOOSE,
    displayName: 'EGG-BUSD',
    apyIconUrls: ['./icons/egg.png'],
    apyTokenSymbols: ['EGG'],
    logoUrl: './icons/egg-busd.png',
    tokenAddress: addresses.BSC.V2.goose_EGG_BUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.goose_EGG_BUSD.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.goose_EGG_BUSD.Underlying, 'EGG', 'bUSD'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.GOOSE,
        params: [addresses.BSC.V2.goose_EGG_BUSD.PoolId, 'EGG', 'bUSD', profitSharingCut8Percent],
      },
    ],
  },
  'MEME20-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    category: VAULT_CATEGORIES_IDS.NFT,
    displayName: 'MEME20-ETH',
    apyIconUrls: ['./icons/muse.png'],
    apyTokenSymbols: ['MUSE'],
    logoUrl: './icons/nft20-meme.png',
    tokenAddress: addresses.V2.nft20_Meme.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Meme.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Meme.Underlying, 'WETH', 'MEME20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Meme.PoolId, 'MEME20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MEME20'],
  },
  MEME20: {
    logoUrl: './icons/meme20.png',
    tokenAddress: addresses.MEME20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.MEME20, addresses.WETH],
    },
  },
  'GPUNKS20-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'GPUNKS20-ETH',
    logoUrl: './icons/nft20-gpunks.png',
    tokenAddress: addresses.V2.nft20_Gpunks.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Gpunks.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Gpunks.Underlying, 'WETH', 'GPUNKS20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Gpunks.PoolId, 'GPUNKS20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'GPUNKS20'],
  },
  GPUNKS20: {
    logoUrl: './icons/gpunks20.png',
    tokenAddress: addresses.GPUNKS20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.GPUNKS20, addresses.WETH],
    },
  },
  MIR: {
    logoUrl: './icons/mir.png',
    tokenAddress: addresses.MIR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.MIR],
    },
  },
  UST: {
    logoUrl: './icons/ust.png',
    tokenAddress: addresses.UST,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.UST],
    },
  },
  mAAPL: {
    logoUrl: './icons/maapl.png',
    tokenAddress: addresses.mAAPL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mirrored-apple'],
    },
  },
  mAMZN: {
    logoUrl: './icons/mamzn.png',
    tokenAddress: addresses.mAMZN,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mirrored-amazon'],
    },
  },
  mGOOGL: {
    logoUrl: './icons/mgoogl.png',
    tokenAddress: addresses.mGOOGL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mirrored-google'],
    },
  },
  mTSLA: {
    logoUrl: './icons/mtsla.png',
    tokenAddress: addresses.mTSLA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mirrored-tesla'],
    },
  },
  mNFLX: {
    logoUrl: './icons/mnflx.png',
    tokenAddress: addresses.mNFLX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mirrored-netflix'],
    },
  },
  mTWTR: {
    logoUrl: './icons/mtwtr.png',
    tokenAddress: addresses.mTWTR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mirrored-twitter'],
    },
  },
  mirrorAAPL: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/mirror-aapl.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'MAAPL-UST',
    tokenAddress: addresses.V2.mirrorAAPL.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.mirrorAAPL.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.mirrorAAPL.Underlying, 'mAAPL', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.mirrorAAPL.RewardPool, 'MIR', 'mirrorAAPL', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'mAAPL', 'UST'],
  },
  mirrorAMZN: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/mirror-amzn.png',
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'MAMZN-UST',
    tokenAddress: addresses.V2.mirrorAMZN.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.mirrorAMZN.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.mirrorAMZN.Underlying, 'mAMZN', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.mirrorAMZN.RewardPool, 'MIR', 'mirrorAMZN', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'mAMZN', 'UST'],
  },
  mirrorGOOG: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/mirror-goog.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'MGOOGL-UST',
    tokenAddress: addresses.V2.mirrorGOOG.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.mirrorGOOG.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.mirrorGOOG.Underlying, 'mGOOGL', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.mirrorGOOG.RewardPool, 'MIR', 'mirrorGOOG', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'mGOOGL', 'UST'],
  },
  mirrorTSLA: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/mirror-tsla.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'MTSLA-UST',
    tokenAddress: addresses.V2.mirrorTSLA.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.mirrorTSLA.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.mirrorTSLA.Underlying, 'mTSLA', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.mirrorTSLA.RewardPool, 'MIR', 'mirrorTSLA', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'mTSLA', 'UST'],
  },
  mirrorNFLX: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/mirror-nflx.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'MNFLX-UST',
    tokenAddress: addresses.V2.mirrorNFLX.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.mirrorNFLX.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.mirrorNFLX.Underlying, 'mNFLX', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.mirrorNFLX.RewardPool, 'MIR', 'mirrorNFLX', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'mNFLX', 'UST'],
  },
  mirrorTWTR: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/mirror-twtr.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'MTWTR-UST',
    tokenAddress: addresses.V2.mirrorTWTR.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.mirrorTWTR.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.mirrorTWTR.Underlying, 'mTWTR', 'UST'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [addresses.V2.mirrorTWTR.RewardPool, 'MIR', 'mirrorTWTR', strat30PercentFactor],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'mTWTR', 'UST'],
  },
  crvLink: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'CRV:LINK',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-link.png',
    tokenAddress: addresses.V2.crvLink.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvLink.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.LINK] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['link', convexProfitSharingFactor],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  'BAC-DAI': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/bac-dai.png',
    displayName: 'DAI-BAC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.UNI_BAC_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UNI_BAC_DAI.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UNI_BAC_DAI.Underlying, 'BAC', 'DAI'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.BASIS,
        params: [
          addresses.V2.UNI_BAC_DAI.RewardPool,
          'BASV2',
          'BAC-DAI',
          strat30PercentFactor,
          BASIS_POOL_IDS['BAC-DAI'],
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'BAC', 'DAI'],
  },
  'DAI-BAS': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/dai-basv2.png',
    displayName: 'DAI-BASv2',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.UNI_DAI_BAS.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UNI_DAI_BAS.NewVault,
    fullBuyback: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UNI_DAI_BAS.Underlying, 'DAI', 'BASV2'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.BASIS,
        params: [
          addresses.V2.UNI_BAC_DAI.RewardPool,
          'BASV2',
          'DAI-BAS',
          strat30PercentFactor,
          BASIS_POOL_IDS['BAS-DAI'],
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'DAI', 'BAS'],
  },
  ellipsis_3pool: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'EPS:3POOL',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/eps-3pool.png',
    tokenAddress: addresses.BSC.V2.ellipsis_3pool.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.ellipsis_3pool.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ELLIPSIS,
        params: [addresses.BSC.V2.ellipsis_3pool.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  ellipsis_EPS_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.ELLIPSIS,
    displayName: 'EPS-BNB',
    apyIconUrls: ['./icons/eps.png'],
    apyTokenSymbols: ['EPS'],
    logoUrl: './icons/eps-bnb.png',
    tokenAddress: addresses.BSC.V2.ellipsis_EPS_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.ellipsis_EPS_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.ellipsis_EPS_BNB.Underlying, 'EPS', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ELLIPSIS,
        params: [addresses.BSC.V2.ellipsis_EPS_BNB.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  space_SPACE_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'SPACE-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/space-bnb.png',
    tokenAddress: addresses.BSC.V2.space_SPACE_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.space_SPACE_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.space_SPACE_BNB.Underlying, 'SPACE', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SPACE,
        params: [
          addresses.BSC.V2.space_SPACE_BNB.PoolId,
          'SPACE',
          'wBNB',
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  space_SPACE_BUSD: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'SPACE-BUSD',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/space-busd.png',
    tokenAddress: addresses.BSC.V2.space_SPACE_BUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.space_SPACE_BUSD.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.space_SPACE_BUSD.Underlying, 'SPACE', 'bUSD'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SPACE,
        params: [
          addresses.BSC.V2.space_SPACE_BUSD.PoolId,
          'SPACE',
          'bUSD',
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  ellipsis_FUSDT: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'EPS:FUSDT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/eps-fusdt.png',
    tokenAddress: addresses.BSC.V2.ellipsis_FUSDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.ellipsis_FUSDT.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.MANUAL,
      params: ['1'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ELLIPSIS,
        params: [addresses.BSC.V2.ellipsis_FUSDT.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  ellipsis_BTC: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.ELLIPSIS,
    displayName: 'EPS:BTC',
    apyIconUrls: ['./icons/eps.png'],
    apyTokenSymbols: ['EPS'],
    logoUrl: './icons/eps-btc.png',
    tokenAddress: addresses.BSC.V2.ellipsis_BTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.ellipsis_BTC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['renbtc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ELLIPSIS,
        params: [addresses.BSC.V2.ellipsis_BTC.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  COMFI: {
    logoUrl: './icons/comfi.png',
    tokenAddress: addresses.COMFI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.COMFI],
    },
  },
  Univ3_USDT_ETH_1400_2400: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: ETH-USDT',
    subLabel: 'ETH Range: 1.4K⟷2.4K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-eth-usdt.png',
    tokenAddress: addresses.V2.Univ3_USDT_ETH_1400_2400.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.Univ3_USDT_ETH_1400_2400.NewVault,
    pricesInfo: {
      WETH: ['Min price: 1400 USDT per ETH', 'Max price: 2400 USDT per ETH'],
      USDT: ['Min price: 0.00071 ETH per USDT', 'Max price: 0.00041 ETH per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.Univ3_USDT_ETH_1400_2400.NewVault, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDT', 'WETH'],
  },
  Univ3_USDC_ETH_1400_2400: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: USDC-ETH',
    subLabel: 'ETH Range: 1.4K⟷2.4K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-usdc-eth.png',
    tokenAddress: addresses.V2.Univ3_USDC_ETH_1400_2400.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.Univ3_USDC_ETH_1400_2400.NewVault,
    pricesInfo: {
      USDC: ['Min price: 0.00071 ETH per USDC', 'Max price: 0.00041 ETH per USDC'],
      WETH: ['Min price: 1400 USDC per ETH', 'Max price: 2400 USDC per ETH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.Univ3_USDC_ETH_1400_2400.NewVault, 'USDC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'WETH'],
  },
  'ETH-DPI': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/eth_dpi.png',
    apyIconUrls: [],
    displayName: 'ETH-DPI',
    apyTokenSymbols: [],
    tokenAddress: addresses.UNI_LP_WETH_DPI,
    decimals: '18',
    vaultAddress: addresses.VaultUNI_LP_WETH_DPI,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DPI'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.UNI_LP_WETH_DPI, 'WETH', 'DPI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.UNISWAP_SNX_POOL_ADDRESS_ETH_DPI,
          'INDEX',
          'ETH-DPI',
          strat30PercentFactor,
        ],
      },
    ],
  },
  KLONDIKE_WBTC_KBTC: {
    chain: CHAINS_ID.ETH_MAINNET,
    fullBuyback: true,
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'WBTC-KBTC',
    logoUrl: './icons/klon-wbtc-kbtc.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.klondike_WBTC_KBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.klondike_WBTC_KBTC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.klondike_WBTC_KBTC.Underlying, 'WBTC', 'KBTC'],
    },
    cmcRewardTokenSymbols: ['iFARM', 'WBTC', 'KBTC'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.V2.klondike_WBTC_KBTC.RewardPool,
          'KLONX',
          'KLONDIKE_WBTC_KBTC',
          strat30PercentFactor,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  KLONDIKE_WBTC_KLON: {
    chain: CHAINS_ID.ETH_MAINNET,
    fullBuyback: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'WBTC-KLONX',
    logoUrl: './icons/klon-wbtc-klon.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.klondike_WBTC_KLON.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.klondike_WBTC_KLON.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.klondike_WBTC_KLON.Underlying, 'WBTC', 'KLONX'],
    },
    cmcRewardTokenSymbols: ['iFARM', 'WBTC', 'KLONX'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.V2.klondike_WBTC_KLON.RewardPool,
          'KLONX',
          'KLONDIKE_WBTC_KLON',
          strat30PercentFactor,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  'LFBTC-LIFT': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/lfbtc-lift.png',
    displayName: 'LFBTC-LIFT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.lfBTC_LIFT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.lfBTC_LIFT.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'lfBTC', 'LIFT'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.lfBTC_LIFT.Underlying, 'lfBTC', 'LIFT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  'WBTC-LFBTC': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    logoUrl: './icons/wbtc-lfbtc.png',
    displayName: 'WBTC-LFBTC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.wBTC_lfBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.wBTC_lfBTC.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'wBTC', 'lfBTC'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.wBTC_lfBTC.Underlying, 'WBTC', 'lfBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  'ROPE20-ETH': {
    chain: CHAINS_ID.ETH_MAINNET,
    fullBuyback: true,
    hideFarmApy: true,
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'ROPE20-ETH',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/nft20-rope20.png',
    tokenAddress: addresses.V2.nft20_Rope.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Rope.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'ROPE20'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Rope.Underlying, 'WETH', 'ROPE20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Rope.PoolId, 'ROPE20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  complifi_COMPFI_WETH: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/compfi-weth.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'COMFI-ETH',
    tokenAddress: addresses.V2.complifi_COMPFI_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.complifi_COMPFI_WETH.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'COMFI'],
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.complifi_COMPFI_WETH.Underlying, 'WETH', 'COMFI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPFI,
        params: [addresses.V2.complifi_COMPFI_WETH.PoolId, 'COMFI', 'WETH', '0.7'],
      },
    ],
  },
  crvAAVE: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'CRV:AAVE',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/curve-aave.png',
    tokenAddress: addresses.V2.crvAAVE.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvAAVE.NewVault,
    inactive: true,
    hideFarmSymbol: true,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.0274'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  RENBTC: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'RENBTC',
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/ren.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.RENBTC,
    decimals: '8',
    vaultAddress: addresses.V2.renBTC.NewVault,
    hideFarmSymbol: true,
    inactive: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.RENBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'RENBTC'],
  },
  'MIC-USDT': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/mic-usdt.png',
    displayName: 'MIC-USDT',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.UNI_MIC_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UNI_MIC_USDT.NewVault,
    fullBuyback: true,
    hideFarmApy: true,
    hideFarmSymbol: true,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UNI_MIC_USDT.Underlying, 'MIC', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'MIC', 'USDT'],
  },
  'MIS-USDT': {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'MIS-USDT',
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/mis-usdt.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.UNI_MIS_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UNI_MIS_USDT.NewVault,
    fullBuyback: true,
    hideFarmApy: true,
    hideFarmSymbol: true,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UNI_MIS_USDT.Underlying, 'MIS', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'MIS', 'USDT'],
  },
  '1INCH-ETH-1INCH': {
    chain: CHAINS_ID.ETH_MAINNET,
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/1inch-eth-1inch.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: '1INCH-ETH',
    tokenAddress: addresses.V2.oneInch_ETH_1INCH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.oneInch_ETH_1INCH.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', '1INCH'],
    hideFarmApy: true,
    hideFarmSymbol: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.oneInch_ETH_1INCH.Underlying, 'ETH', '1INCH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ONEINCH,
        params: [
          addresses.V2.oneInch_ETH_1INCH.RewardPool,
          '1INCH',
          '1INCH-ETH-1INCH',
          strat30PercentFactor,
          '0',
        ],
      },
    ],
  },
  '1INCH-USDC-1INCH': {
    chain: CHAINS_ID.ETH_MAINNET,
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/1inch-usdc-1inch.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: '1INCH-USDC',
    tokenAddress: addresses.V2.oneInch_1INCH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.oneInch_1INCH_USDC.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'USDC', '1INCH'],
    hideFarmApy: true,
    hideiFarmSymbol: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.oneInch_1INCH_USDC.Underlying, 'USDC', '1INCH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ONEINCH,
        params: [
          addresses.V2.oneInch_1INCH_USDC.RewardPool,
          '1INCH',
          '1INCH-USDC-1INCH',
          strat30PercentFactor,
          '0',
        ],
      },
    ],
  },
  '1INCH-WBTC-1INCH': {
    chain: CHAINS_ID.ETH_MAINNET,
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/1inch-wbtc-1inch.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: '1INCH-WBTC',
    tokenAddress: addresses.V2.oneInch_1INCH_WBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.oneInch_1INCH_WBTC.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'USDC', '1INCH'],
    hideFarmApy: true,
    hideiFarmSymbol: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.oneInch_1INCH_WBTC.Underlying, 'WBTC', '1INCH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ONEINCH,
        params: [
          addresses.V2.oneInch_1INCH_WBTC.RewardPool,
          '1INCH',
          '1INCH-WBTC-1INCH',
          strat30PercentFactor,
          '0',
        ],
      },
    ],
  },
  'DAI-BSG': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/dai-bsg.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'DAI-BSG',
    tokenAddress: addresses.V2.basisGold_DAI_BSG.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.basisGold_DAI_BSG.NewVault,
    hideFarmApy: true,
    hideFarmSymbol: true,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.basisGold_DAI_BSG.Underlying, 'DAI', 'BSG'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'DAI', 'BSG'],
  },
  'DAI-BSGS': {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/dai-bsgs.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'DAI-BSGS',
    tokenAddress: addresses.V2.basisGold_DAI_BSGS.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.basisGold_DAI_BSGS.NewVault,
    hideFarmApy: true,
    hideFarmSymbol: true,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.basisGold_DAI_BSGS.Underlying, 'DAI', 'BSGS'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'DAI', 'BSGS'],
  },
  BAC: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/bac.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'BAC',
    tokenAddress: addresses.V2.basisGold_BAC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.basisGold_BAC.NewVault,
    hideFarmSymbol: true,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.V2.basisGold_BAC.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'BAC'],
  },
  ESD: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/esd.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'ESD',
    tokenAddress: addresses.V2.basisGold_ESD.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.basisGold_ESD.NewVault,
    hideFarmSymbol: true,
    inactive: true,
    cmcRewardTokenSymbols: ['FARM', 'ESD'],
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.V2.basisGold_ESD.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  DSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/dsd.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'DSD',
    tokenAddress: addresses.V2.basisGold_DSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.basisGold_DSD.NewVault,
    hideFarmSymbol: true,
    inactive: true,
    cmcRewardTokenSymbols: ['FARM', 'DSD'],
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.V2.basisGold_DSD.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  EGG: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/egg.png',
    tokenAddress: addresses.BSC.EGG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['goose-finance'],
    },
  },
  goose_EGG: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'EGG',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/egg.png',
    tokenAddress: addresses.BSC.V2.goose_EGG.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.goose_EGG.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['goose-finance'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.GOOSE,
        params: [addresses.BSC.V2.goose_EGG.PoolId, null, null, profitSharingCut8Percent],
      },
    ],
  },
  '1INCH-1INCH-BNB': {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: '1INCH-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/1inch-1inch-bnb.png',
    tokenAddress: addresses.BSC.V2.oneInch_1INCH_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.oneInch_1INCH_BNB.NewVault,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.oneInch_1INCH_BNB.Underlying, 'b1INCH', 'BNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.BSC.V2.oneInch_1INCH_BNB.RewardPool,
          'b1INCH',
          '1INCH-1INCH-BNB',
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'b1INCH', 'BNB'],
  },
  '1INCH-1INCH-RENBTC': {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: '1INCH-RENBTC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/1inch-1inch-renbtc.png',
    tokenAddress: addresses.BSC.V2.oneInch_1INCH_renBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.oneInch_1INCH_renBTC.NewVault,
    inactive: true,
    hideFarmSymbol: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.oneInch_1INCH_renBTC.Underlying, 'b1INCH', 'bRENBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ONEINCH,
        params: [
          addresses.BSC.V2.oneInch_1INCH_renBTC.RewardPool,
          'b1INCH',
          '1INCH-1INCH-RENBTC',
          profitSharingCut8Percent,
          '0',
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'b1INCH', 'bRENBTC'],
  },
  b1INCH: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/1inch.png',
    tokenAddress: addresses.BSC.b1INCH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['1inch'],
    },
  },
  bRENBTC: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/renbtc.png',
    tokenAddress: addresses.BSC.bRENBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['renbtc'],
    },
  },
  BDO: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/bdo.png',
    tokenAddress: addresses.BSC.BDO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['bdollar'],
    },
  },
  sBDO: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/sbdo.png',
    tokenAddress: addresses.BSC.sBDO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['bdollar-share'],
    },
  },
  bdo_BDO_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'BDO-BNB',
    logoUrl: './icons/bdo-bdo-bnb.png',
    tokenAddress: addresses.BSC.V2.bdo_BDO_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.bdo_BDO_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.bdo_BDO_BNB.Underlying, 'BDO', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BDO,
        params: [addresses.BSC.V2.bdo_BDO_BNB.poolId, profitSharingCut8Percent],
      },
    ],
  },
  bdo_BDO_BUSD: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'BDO-BUSD',
    logoUrl: './icons/bdo-bdo-busd.png',
    tokenAddress: addresses.BSC.V2.bdo_BDO_BUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.bdo_BDO_BUSD.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.bdo_BDO_BUSD.Underlying, 'BDO', 'bUSD'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BDO,
        params: [addresses.BSC.V2.bdo_BDO_BUSD.poolId, profitSharingCut8Percent],
      },
    ],
  },
  bdo_SBDO_BUSD: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'SBDO-BUSD',
    logoUrl: './icons/bdo-sbdo-busd.png',
    tokenAddress: addresses.BSC.V2.bdo_SBDO_BUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.bdo_SBDO_BUSD.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.bdo_SBDO_BUSD.Underlying, 'sBDO', 'bUSD'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BDO,
        params: [addresses.BSC.V2.bdo_SBDO_BUSD.poolId, profitSharingCut8Percent],
      },
    ],
  },
  belt_Venus: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: 'BELT:Venus',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/belt-venus.png',
    tokenAddress: addresses.BSC.V2.belt_Venus.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.belt_Venus.NewVault,
    inactive: true,
    priceFunction: {
      type: GET_PRICE_TYPES.MANUAL,
      params: ['1.0'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BELT,
        params: [addresses.BSC.V2.belt_Venus.PoolId, profitSharingCut8Percent],
      },
    ],
  },
  SWIRL: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/swirl.png',
    tokenAddress: addresses.BSC.SWIRL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['swirl-cash'] },
  },
  swirl_SWIRL_BNB: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    inactive: true,
    displayName: 'SWIRL-BNB',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/swirl-bnb.png',
    tokenAddress: addresses.BSC.V2.swirl_SWIRL_BNB.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.swirl_SWIRL_BNB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BSC.V2.swirl_SWIRL_BNB.Underlying, 'SWIRL', 'wBNB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SWIRL,
        params: [profitSharingCut8Percent],
      },
    ],
  },
  popsicle_ICE: {
    chain: CHAINS_ID.BSC_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE_BSC,
    displayName: 'ICE',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/ice.png',
    tokenAddress: addresses.BSC.V2.popsicle_ICE.Underlying,
    decimals: '18',
    vaultAddress: addresses.BSC.V2.popsicle_ICE.NewVault,
    inactive: true,
    hideFarmSymbol: true,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ice-token'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.POPSICLE,
        params: [
          addresses.BSC.V2.popsicle_ICE.PoolId,
          null,
          null,
          profitSharingCut8Percent,
          CHAINS_ID.BSC_MAINNET,
        ],
      },
    ],
  },
  TUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'TUSD',
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    logoUrl: './icons/tusd.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.TUSD,
    decimals: '18',
    vaultAddress: addresses.ProxiedVaultTUSD,
    inactive: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.TUSD] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'TUSD'],
  },
  ICE: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/ice.png',
    tokenAddress: addresses.BSC.ICE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ice-token'],
    },
  },
  SPACE: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/space.png',
    tokenAddress: addresses.BSC.SPACE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.PANCAKESWAP_PAIR,
      params: [addresses.BSC.SPACE],
    },
  },
  bFARMBoost: {
    chain: CHAINS_ID.BSC_MAINNET,
    logoUrl: './icons/farm.png',
    tokenAddress: addresses.BSC.bFARM,
    displayName: 'bFARM',
    amplifierViewerAddress: addresses.BSC.AmpliFARM.amplifierViewer,
    amplifierTokenAddress: addresses.BSC.AmpliFARM.tokenAddress,
    amplifierContractAddress: addresses.BSC.AmpliFARM.amplifier,
    amplifierTokenDisplayName: 'ampliFARM',
    amplifierTokenLogoUrl: './icons/amplifarm.png',
    proxyAddress: addresses.BSC.AmpliFARM.proxy,
    decimals: '18',
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.FARM] },
  },
  FCASH: {
    chain: CHAINS_ID.ETH_MAINNET,
    displayName: 'FCASH',
    logoUrl: './icons/ifarm.png',
    tokenAddress: addresses.FCASH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_V3,
      params: ['FCASH', 'USDC'],
    },
  },
  Univ3_DPI_ETH: {
    disableAutoSwap: true,
    testInactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: ETH-DPI',
    apyIconUrls: [],
    apyTokenSymbols: [''],
    logoUrl: './icons/univ3-dpi-eth.png',
    tokenAddress: addresses.V2.Univ3_DPI_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.Univ3_DPI_ETH.NewVault,
    pricesInfo: { DPI: ['Testing', 'Testing'], ETH: ['Testing', 'Testing'] },
    migrationInfo: {
      lpTokenAddress: addresses.UNI_LP_WETH_DPI,
      lpTokenName: 'DPI-WETH',
      lpTokenDecimals: '18',
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.Univ3_DPI_ETH.NewVault, 'DPI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DPI', 'WETH'],
  },
  BUSD: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: './icons/busd.png',
    tokenAddress: addresses.BUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['binance-usd'],
    },
  },
  fAUR0112_USDC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_AUR_USDC.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_AUR_USDC.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  fSUSHI: {
    chain: CHAINS_ID.ETH_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.V2.SUSHI.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.F_TOKEN, params: [addresses.V2.SUSHI.NewVault, '18'] },
  },
  AUR0112: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.AUR0112,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN_THREE_WAY,
      params: [
        addresses.MATIC.AUR0112,
        'JRT',
        'pUMA',
        'KNC',
        addresses.MATIC.JARVIS_SANCTUARY_AUR0112,
      ],
    },
  },
  JEUR: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jeur.png',
    tokenAddress: addresses.MATIC.JEUR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['jarvis-synthetic-euro'],
    },
  },
  JCHF: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jchf.png',
    tokenAddress: addresses.MATIC.JCHF,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['jarvis-synthetic-swiss-franc'],
    },
  },
  JGBP: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/jgbp.png',
    tokenAddress: addresses.MATIC.JGBP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['jarvis-synthetic-british-pound'],
    },
  },
  'DEN-MAY22': {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.DEN_MAY22,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.DEN_MAY22,
        addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
        addresses.MATIC.V2.jarvis_DENMAY22_4EUR.Underlying,
      ],
    },
  },
  'DEN-MAR22': {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.DEN_MAR22,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.DEN_MAR22,
        addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
        addresses.MATIC.V2.jarvis_DEN2_4EUR.Underlying,
      ],
    },
  },
  DEN: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.DEN,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.DEN,
        addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
        addresses.MATIC.V2.jarvis_DEN_4EUR.Underlying,
      ],
    },
  },
  pMIMO: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.pMIMO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mimo-parallel-governance-token'],
    },
  },
  pEURT: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.pEURT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether-eurt'],
    },
  },
  pEURS: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.pEURS,
    decimals: '2',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['stasis-eurs'],
    },
  },
  PAR: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '',
    tokenAddress: addresses.MATIC.PAR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['par-stablecoin'],
    },
  },
  fDENMAY22_4EUR: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_DENMAY22_4EUR.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_DENMAY22_4EUR.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  fDEN2_4EUR: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_DEN2_4EUR.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_DEN2_4EUR.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  fDEN_4EUR: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_DEN_4EUR.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_DEN_4EUR.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  fAURFEB22_USDC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_AUR_USDC_V2.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_AUR_USDC_V2.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  fAURAPR22_USDC: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.V2.jarvis_AUR3_USDC.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.MATIC.V2.jarvis_AUR3_USDC.NewVault, '18', CHAINS_ID.MATIC_MAINNET],
    },
  },
  pMTA: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/mta.svg',
    tokenAddress: addresses.MATIC.pMTA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['meta'] },
  },
  'AUR-APR22': {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.AUR_APR22,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.AUR_APR22,
        addresses.MATIC.pUSDC,
        addresses.MATIC.V2.jarvis_AUR3_USDC.Underlying,
      ],
    },
  },
  AURFEB22: {
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: '', // unused
    tokenAddress: addresses.MATIC.AURFEB22,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.KYBER_PAIR,
      params: [
        addresses.MATIC.AURFEB22,
        addresses.MATIC.pUSDC,
        addresses.MATIC.V2.jarvis_AUR_USDC_V2.Underlying,
      ],
    },
  },
  jarvis_AUR_USDC_V2: {
    inactive: true,
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/aur-usdc.png',
    apyIconUrls: [],
    apyTokenSymbols: [],
    displayName: 'Jarvis: AUR(FEB22)-USDC',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_AUR_USDC_V2.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_AUR_USDC_V2.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_AUR_USDC_V2.Underlying, 'AURFEB22', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS',
        params: [3, addresses.MATIC.V2.jarvis_AUR_USDC_V2.Underlying, profitSharingCut8Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AURFEB22'],
  },
  FOUR_EUR: {
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/4eur.png',
    apyIconUrls: ['./icons/den.png'],
    apyTokenSymbols: ['DEN-MAR22'],
    displayName: 'Jarvis: 4EUR',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_4EUR_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
        addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
        18,
        ['JEUR', 'pEURT', 'pEURS', 'PAR'],
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          0,
          addresses.MATIC.V2.jarvis_4EUR_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_4EUR_HODL.Underlying,
          'jarvis_DENMAY22_4EUR',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>DEN</b> deposited into <b>DEN(MAY22)-4EUR</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DEN-MAY22'],
  },
  jarvis_DENMAY22_4EUR: {
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/den-4eur.png',
    apyIconUrls: ['./icons/den.png'],
    apyTokenSymbols: ['DEN-MAY22'],
    displayName: 'Jarvis: DEN(MAY22)-4EUR',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_DENMAY22_4EUR.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_DENMAY22_4EUR.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_DENMAY22_4EUR.Underlying, 'DEN-MAY22', 'FOUR_EUR'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_V2',
        params: [
          1,
          addresses.MATIC.V2.jarvis_DENMAY22_4EUR.RewardPool,
          addresses.MATIC.V2.jarvis_DENMAY22_4EUR.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'DEN-MAY22'],
  },
  jarvis_DEN2_4EUR: {
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/den-4eur.png',
    apyIconUrls: ['./icons/den.png'],
    apyTokenSymbols: ['DEN-MAR22'],
    displayName: 'Jarvis: DEN(MAR22)-4EUR',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_DEN2_4EUR.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_DEN2_4EUR.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_DEN2_4EUR.Underlying, 'DEN-MAR22', 'FOUR_EUR'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_V2',
        params: [
          1,
          addresses.MATIC.V2.jarvis_DEN2_4EUR.RewardPool,
          addresses.MATIC.V2.jarvis_DEN2_4EUR.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'DEN-MAR22'],
  },
  jarvis_DEN_4EUR: {
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/den-4eur.png',
    apyIconUrls: ['./icons/den.png'],
    apyTokenSymbols: ['DEN'],
    displayName: 'Jarvis: DEN-4EUR',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_DEN_4EUR.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_DEN_4EUR.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_DEN_4EUR.Underlying, 'DEN', 'FOUR_EUR'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_V2',
        params: [
          0,
          addresses.MATIC.V2.jarvis_DEN_4EUR.RewardPool,
          addresses.MATIC.V2.jarvis_DEN_4EUR.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DEN'],
  },
  jarvis_JEUR_USDC_HODL: {
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/eur-usdc.png',
    apyTokenSymbols: ['AUR-APR22'],
    apyIconUrls: ['./icons/jaur.png'],
    displayName: 'Jarvis: EUR-USDC',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_JEUR_USDC_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_JEUR_USDC_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_JEUR_USDC_HODL.Underlying, 'JEUR', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          0,
          addresses.MATIC.V2.jarvis_JEUR_USDC_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_JEUR_USDC_HODL.Underlying,
          'jarvis_AUR3_USDC',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>AUR</b> deposited into <b>AUR-USDC</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AUR-APR22'],
  },
  jarvis_JGBP_USDC_HODL: {
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/gbp-usdc.png',
    apyTokenSymbols: ['AUR-APR22'],
    apyIconUrls: ['./icons/jaur.png'],
    displayName: 'Jarvis: GBP-USDC',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_JGBP_USDC_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_JGBP_USDC_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_JGBP_USDC_HODL.Underlying, 'JGBP', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          2,
          addresses.MATIC.V2.jarvis_JGBP_USDC_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_JGBP_USDC_HODL.Underlying,
          'jarvis_AUR3_USDC',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>AUR</b> deposited into <b>AUR-USDC</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AUR-APR22'],
  },
  jarvis_JCHF_USDC_HODL: {
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/chf-usdc.png',
    apyTokenSymbols: ['AUR-APR22'],
    apyIconUrls: ['./icons/jaur.png'],
    displayName: 'Jarvis: CHF-USDC',
    subLabel: 'HODL',
    tokenAddress: addresses.MATIC.V2.jarvis_JCHF_USDC_HODL.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_JCHF_USDC_HODL.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_JCHF_USDC_HODL.Underlying, 'JCHF', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_HODL_V2',
        params: [
          1,
          addresses.MATIC.V2.jarvis_JCHF_USDC_HODL.RewardPool,
          addresses.MATIC.V2.jarvis_JCHF_USDC_HODL.Underlying,
          'jarvis_AUR3_USDC',
          profitSharingCut8Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    apyDescriptionOverride: [
      'Auto harvested <b>AUR</b> deposited into <b>AUR-USDC</b> for more APY',
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AUR-APR22'],
  },
  jarvis_AUR3_USDC: {
    category: VAULT_CATEGORIES_IDS.JARVIS,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/aur-usdc.png',
    apyTokenSymbols: ['AUR-APR22'],
    apyIconUrls: ['./icons/jaur.png'],
    displayName: 'Jarvis: AUR(APR22)-USDC',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_AUR3_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_AUR3_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_AUR3_USDC.Underlying, 'AUR-APR22', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        type: 'JARVIS_V2',
        params: [
          3,
          addresses.MATIC.V2.jarvis_AUR3_USDC.RewardPool,
          addresses.MATIC.V2.jarvis_AUR3_USDC.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AUR-APR22'],
  },
  jarvis_AUR_USDC: {
    category: VAULT_CATEGORIES_IDS.INACTIVE_POLYGON,
    inactive: true,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/aur-usdc.png',
    apyIconUrls: ['./icons/jaur.png'],
    apyTokenSymbols: ['AUR0112'],
    displayName: 'Jarvis: AUR(0112)-USDC',
    subLabel: 'Auto-compounding',
    tokenAddress: addresses.MATIC.V2.jarvis_AUR_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.jarvis_AUR_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.jarvis_AUR_USDC.Underlying, 'AUR0112', 'pUSDC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AUR0112'],
  },
  bal_BTC: {
    category: VAULT_CATEGORIES_IDS.BALANCER,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/balancer-btc.png',
    apyIconUrls: ['./icons/balancer.png'],
    apyTokenSymbols: ['BAL'],
    displayName: 'Balancer: BTC',
    subLabel: 'WBTC, renBTC',
    tokenAddress: addresses.MATIC.V2.balancer_BTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.balancer_BTC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.balancer_BTC.Underlying,
        addresses.MATIC.V2.balancer_BTC.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.balancer_BTC.Underlying,
          addresses.MATIC.V2.balancer_BTC.PoolId,
          '1000',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL'],
  },
  bal_POLYBASE: {
    category: VAULT_CATEGORIES_IDS.BALANCER,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/balancer-polybase.png',
    apyIconUrls: ['./icons/balancer.png'],
    apyTokenSymbols: ['BAL'],
    displayName: 'Balancer: Polybase',
    subLabel: 'WMATIC: 25%, USDC: 25%, WETH: 25%, BAL: 25%',
    tokenAddress: addresses.MATIC.V2.balancer_POLYBASE.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.balancer_POLYBASE.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.balancer_POLYBASE.Underlying,
        addresses.MATIC.V2.balancer_POLYBASE.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.balancer_POLYBASE.Underlying,
          addresses.MATIC.V2.balancer_POLYBASE.PoolId,
          '5500',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL'],
  },
  bal_TRICRYPTO: {
    category: VAULT_CATEGORIES_IDS.BALANCER,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/balancer-tricrypto.png',
    apyIconUrls: ['./icons/balancer.png'],
    apyTokenSymbols: ['BAL'],
    displayName: 'Balancer: Tricrypto',
    subLabel: 'WBTC: 33%, USDC: 33%, WETH: 33%',
    tokenAddress: addresses.MATIC.V2.balancer_TRICRYPTO.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.balancer_TRICRYPTO.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.balancer_TRICRYPTO.Underlying,
        addresses.MATIC.V2.balancer_TRICRYPTO.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.balancer_TRICRYPTO.Underlying,
          addresses.MATIC.V2.balancer_TRICRYPTO.PoolId,
          '2250',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL'],
  },
  bal_STABLE: {
    category: VAULT_CATEGORIES_IDS.BALANCER,
    chain: CHAINS_ID.MATIC_MAINNET,
    logoUrl: './icons/balancer-stable.png',
    apyIconUrls: ['./icons/balancer.png', './icons/qi.png'],
    apyTokenSymbols: ['BAL', 'QI'],
    displayName: 'Balancer: Stable',
    subLabel: 'USDC, DAI, miMATIC, USDT',
    tokenAddress: addresses.MATIC.V2.balancer_STABLE.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.balancer_STABLE.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.balancer_STABLE.Underlying,
        addresses.MATIC.V2.balancer_STABLE.PoolId,
        CHAINS_ID.MATIC_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.MATIC.V2.balancer_STABLE.Underlying,
          addresses.MATIC.V2.balancer_STABLE.PoolId,
          '4000',
          profitSharingCut8Percent,
          CHAINS_ID.MATIC_MAINNET,
          [addresses.MATIC.QI],
          ['20000'],
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL', 'QI'],
  },
  UniV3_REI_ETH: {
    subLabel: 'Zerogoki',
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: REI-ETH (legacy)',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-rei-eth.png',
    tokenAddress: addresses.V2.UniV3_REI_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_REI_ETH.NewVault,
    pricesInfo: {
      REI: ['Min price: 0.00020073 ETH per REI', 'Max price: 0.0020099 ETH per REI'],
      ETH: ['Min price: 497.55 REI per ETH', 'Max price: 4981.9 REI per ETH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_REI_ETH.NewVault, 'REI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'REI', 'ETH'],
    rowTooltip: 'Out of Range',
    disableAutoSwap: true,
  },
  UniV3_REI_wBTC: {
    subLabel: 'Zerogoki',
    inactive: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    displayName: 'Uniswap V3: REI-WBTC',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-rei-wbtc.png',
    tokenAddress: addresses.V2.UniV3_REI_wBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_REI_wBTC.NewVault,
    pricesInfo: {
      REI: ['Min price: <0.0001 WBTC per REI', 'Max price: 0.0001399 WBTC per REI'],
      WBTC: ['Min price: 7147.8 REI per WBTC', 'Max price: 71571 REI per WBTC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_REI_wBTC.NewVault, 'REI', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'REI', 'WBTC'],
    rowTooltip: 'Out of Range',
    disableAutoSwap: true,
  },
  Univ3_DAI_ETH_1400_2400: {
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAINS_ID.ETH_MAINNET,
    category: VAULT_CATEGORIES_IDS.INACTIVE,
    inactive: true,
    displayName: 'Uniswap V3: DAI-ETH',
    subLabel: 'ETH Range: 1.4K⟷2.4K',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: './icons/univ3-dai-eth.png',
    tokenAddress: addresses.V2.Univ3_DAI_ETH_1400_2400.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.Univ3_DAI_ETH_1400_2400.NewVault,
    pricesInfo: {
      DAI: ['Min price: 0.00071 ETH per DAI', 'Max price: 0.00041 ETH per DAI'],
      WETH: ['Min price: 1400 DAI per ETH', 'Max price: 2400 DAI per ETH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.Univ3_DAI_ETH_1400_2400.NewVault, 'DAI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'WETH'],
  },
}
